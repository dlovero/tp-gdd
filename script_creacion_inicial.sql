USE [GD1C2017]
IF NOT EXISTS (
SELECT schema_name
FROM information_schema.SCHEMATA
WHERE schema_name = 'DESCONOCIDOS4' )
BEGIN
EXEC sp_executesql N'CREATE SCHEMA DESCONOCIDOS4'
END
GO

/*---------Limpieza de Tablas-------------*/
IF OBJECT_ID('DESCONOCIDOS4.ITEM_RENDICION') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ITEM_RENDICION ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.ITEM_FACTURA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ITEM_FACTURA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CABECERO_RENDICION') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CABECERO_RENDICION ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CABECERO_FACTURA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CABECERO_FACTURA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.VIAJE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.VIAJE ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.VIAJE_REP') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.VIAJE_REP ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.RENDICION_REP') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.RENDICION_REP ;
END;
GO

IF OBJECT_ID('DESCONOCIDOS4.FACTURA_REP') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.FACTURA_REP ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.UNIDAD_DISPONIBLE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.UNIDAD_DISPONIBLE ;
END
GO
IF OBJECT_ID('DESCONOCIDOS4.USUARIO_ROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.USUARIO_ROL ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.USUARIO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.USUARIO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CHOFER') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CHOFER ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CLIENTE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CLIENTE ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.PERSONA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.PERSONA ;
END;
GO

IF OBJECT_ID('DESCONOCIDOS4.TURNO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.TURNO ;
END
GO
IF OBJECT_ID('DESCONOCIDOS4.AUTO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.AUTO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MARCA_MODELO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MARCA_MODELO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MARCA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MARCA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MODELO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MODELO ;
END;
GO



IF OBJECT_ID('DESCONOCIDOS4.FUNCIONALIDADXROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.FUNCIONALIDADXROL ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.ROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ROL ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.HOJA_MENU') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.HOJA_MENU ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.RAMA_MENU') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.RAMA_MENU ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.FUNCIONALIDAD') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.FUNCIONALIDAD ;
END;
GO

/*---------Definiciones de Tabla-------------*/
CREATE TABLE [DESCONOCIDOS4].PERSONA(
Persona_Id INT IDENTITY(1,1) NOT NULL,
Persona_Dni NUMERIC(18,0) NOT NULL UNIQUE,
Persona_Nombre VARCHAR(255)NOT NULL,
Persona_Apellido VARCHAR(255) NOT NULL,
Persona_Direccion VARCHAR(255) NOT NULL,
Persona_Piso SMALLINT NOT NULL,
Persona_Departamento  VARCHAR(255) NOT NULL,
Persona_Localidad  VARCHAR(255) NOT NULL,
Persona_Cod_Postal VARCHAR(255) NOT NULL,
Persona_Telefono NUMERIC(18,0) NOT NULL  UNIQUE,
Persona_Mail VARCHAR(255) NOT NULL,
Persona_Fecha_Nac DATETIME NOT NULL,
PRIMARY KEY (Persona_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].USUARIO(
Usu_Id INT IDENTITY(1,1) NOT NULL,
Usu_Per_Id INT ,
Usu_Nombre_Usuario VARCHAR (255) NOT NULL UNIQUE,
Usu_Password VARCHAR(255) NOT NULL,
Usu_cantIntentosLoginFallidos SMALLINT DEFAULT 0,
Usu_Habilitado BIT DEFAULT 1,
PRIMARY KEY (Usu_Id)
);
GO

CREATE TABLE [DESCONOCIDOS4].CHOFER(
Chofer_Id INT NOT NULL IDENTITY(1,1),
Chofer_Per_Id INT REFERENCES [DESCONOCIDOS4].PERSONA NOT NULL,
Chofer_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Chofer_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].CLIENTE(
Cliente_Id INT NOT NULL IDENTITY(1,1),
Cliente_Per_ID INT REFERENCES [DESCONOCIDOS4].PERSONA NOT NULL, 
Cliente_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Cliente_Id)
);
GO

CREATE TABLE [DESCONOCIDOS4].TURNO(
Turno_Id INT NOT NULL IDENTITY(1,1), 
Turno_Hora_Inicio NUMERIC(18,0) NOT NULL,
Turno_Hora_Fin NUMERIC(18,0) NOT NULL,
Turno_Descripcion VARCHAR(255) NOT NULL,
Turno_Valor_Kilometro NUMERIC(18,2) NOT NULL,
Turno_Precio_Base NUMERIC(18,2) NOT NULL,
Turno_Habilitado BIT DEFAULT 1
PRIMARY KEY(Turno_Id),
CHECK (Turno_Hora_Inicio >=0  AND Turno_Hora_Inicio<=24 AND Turno_Hora_Fin >=0 AND Turno_Hora_Fin<=24)
);
GO

CREATE TABLE [DESCONOCIDOS4].MODELO (
Modelo_Id INT NOT NULL IDENTITY(1,1),
Modelo_Nombre VARCHAR(255),
Modelo_Rodado VARCHAR(10),
PRIMARY KEY(Modelo_id)
);
GO
CREATE TABLE [DESCONOCIDOS4].MARCA (
Marca_Id INT NOT NULL IDENTITY(1,1),
Marca_Nombre  VARCHAR(255),
PRIMARY KEY(Marca_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].MARCA_MODELO (
Marca_Modelo_Id INT NOT NULL IDENTITY(1,1),
Marca_Modelo_Marca INT REFERENCES [DESCONOCIDOS4].MARCA NOT NULL,
Marca_Modelo_Modelo INT REFERENCES [DESCONOCIDOS4].MODELO NOT NULL,
PRIMARY KEY(Marca_Modelo_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].AUTO(
Auto_Id INT IDENTITY (1,1) NOT NULL,
Auto_Patente VARCHAR(10) NOT NULL UNIQUE,
Auto_Detalle VARCHAR(26),
Auto_Marca_Modelo INT REFERENCES [DESCONOCIDOS4].MARCA_MODELO,
Auto_Licencia VARCHAR(26),
Auto_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Auto_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].UNIDAD_DISPONIBLE(
Uni_Dis_Auto INT REFERENCES [DESCONOCIDOS4].AUTO NOT NULL,
Uni_Dis_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Uni_Dis_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
PRIMARY KEY(Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno)
);
GO

CREATE TABLE [DESCONOCIDOS4].VIAJE(
Viaje_Nro INT NOT NULL IDENTITY(1,1),
Viaje_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Viaje_Cliente INT REFERENCES [DESCONOCIDOS4].CLIENTE NOT NULL,
Viaje_Automovil INT REFERENCES [DESCONOCIDOS4].AUTO NOT NULL,
Viaje_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
Viaje_Precio_Base NUMERIC(18,2) NOT NULL,
Viaje_Valor_km NUMERIC(18,2) NOT NULL,
Viaje_Importe NUMERIC(18,2) NOT NULL,
Viaje_Cantidad_Km NUMERIC(18,0) NOT NULL,
Viaje_Fecha_Hora_Inicio DATETIME,
Viaje_Fecha_Hora_Fin DATETIME,
PRIMARY KEY (Viaje_Nro),
CHECK (Viaje_Cantidad_Km >0 )
);
GO
CREATE TABLE [DESCONOCIDOS4].VIAJE_REP (
Auto_Marca VARCHAR(255),
Auto_Modelo VARCHAR(255),
Auto_Patente VARCHAR(10),
Auto_Licencia VARCHAR(26),
Auto_Rodado VARCHAR(10),
Chofer_Nombre VARCHAR(255),
Chofer_Apellido VARCHAR(255),
Chofer_Dni  NUMERIC(18,0),
Chofer_Direccion VARCHAR(255),
Chofer_Telefono  NUMERIC(18,0),
Chofer_Mail VARCHAR(50),
Chofer_Fecha_Nac DATETIME,
Viaje_Cant_Kilometros  NUMERIC(18,0),
Viaje_Fecha DATETIME,
Turno_Hora_Inicio  NUMERIC(18,0),
Turno_Hora_Fin  NUMERIC(18,0),
Turno_Descripcion VARCHAR(255),
Turno_Valor_Kilometro  NUMERIC(18,2),
Turno_Precio_Base  NUMERIC(18,2),
Cliente_Nombre VARCHAR(255),
Cliente_Apellido VARCHAR(255),
Cliente_Dni  NUMERIC(18,0),
Cliente_Telefono  NUMERIC(18,0),
Cliente_Direccion VARCHAR(255),
Cliente_Mail VARCHAR(255),
Cliente_Fecha_Nac DATETIME,
);
GO
CREATE TABLE [DESCONOCIDOS4].CABECERO_FACTURA(
Cab_Fac_Nro NUMERIC(18,0) NOT NULL,
Cab_Fac_Fecha DATETIME NOT NULL,
Cab_Fac_Cliente INT  NOT NULL,
Cab_Fac_Fecha_Inicio DATETIME,
Cab_Fac_Fecha_Fin DATETIME,
Cab_Fac_Total_Fac NUMERIC(18,2),
PRIMARY KEY (Cab_Fac_Nro),
FOREIGN KEY (Cab_Fac_Cliente) REFERENCES [DESCONOCIDOS4].CLIENTE,
);
GO
CREATE TABLE [DESCONOCIDOS4].ITEM_FACTURA(
Item_Fac_Nro_Fac NUMERIC(18,0) REFERENCES [DESCONOCIDOS4].CABECERO_FACTURA  NOT NULL,
Item_Fac_Item INT NOT NULL,
Item_Fac_Id_Viaje int  REFERENCES [DESCONOCIDOS4].VIAJE NOT NULL,
PRIMARY KEY (Item_Fac_Nro_Fac,Item_Fac_Item) 
);
GO
CREATE TABLE [DESCONOCIDOS4].CABECERO_RENDICION(
Cab_Rend_Nro NUMERIC(18,0) NOT NULL,
Cab_Rend_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
Cab_Rend_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Cab_Rend_Fecha DATETIME NOT NULL,
Cab_Rend_Importe NUMERIC(18,2),
PRIMARY KEY (Cab_Rend_Nro)
);
GO
CREATE TABLE [DESCONOCIDOS4].ITEM_RENDICION(
Item_Rend_NroRend NUMERIC(18,0)  REFERENCES [DESCONOCIDOS4].CABECERO_RENDICION(Cab_Rend_Nro) NOT NULL ,
Item_Rend_Pos SMALLINT NOT NULL,
Item_Rend_Viaje INT REFERENCES [DESCONOCIDOS4].VIAJE NOT NULL
PRIMARY KEY (Item_Rend_NroRend,Item_Rend_Pos),
);
GO
CREATE TABLE [DESCONOCIDOS4].FACTURA_REP (
Auto_Marca VARCHAR(255),
Auto_Modelo VARCHAR(255),
Auto_Patente VARCHAR(10),
Auto_Licencia VARCHAR(26),
Auto_Rodado VARCHAR(10),
Chofer_Nombre VARCHAR(255),
Chofer_Apellido VARCHAR(255),
Chofer_Dni  NUMERIC(18,0),
Chofer_Direccion VARCHAR(255),
Chofer_Telefono  NUMERIC(18,0),
Chofer_Mail VARCHAR(50),
Chofer_Fecha_Nac DATETIME,
Viaje_Cant_Kilometros  NUMERIC(18,0),
Viaje_Fecha DATETIME,
Turno_Hora_Inicio  NUMERIC(18,0),
Turno_Hora_Fin  NUMERIC(18,0),
Turno_Descripcion VARCHAR(255),
Turno_Valor_Kilometro  NUMERIC(18,2),
Turno_Precio_Base  NUMERIC(18,2),
Cliente_Nombre VARCHAR(255),
Cliente_Apellido VARCHAR(255),
Cliente_Dni  NUMERIC(18,0),
Cliente_Telefono  NUMERIC(18,0),
Cliente_Direccion VARCHAR(255),
Cliente_Mail VARCHAR(255),
Cliente_Fecha_Nac DATETIME,
Factura_Fecha_Inicio DATETIME,
Factura_Fecha_Fin DATETIME,
Factura_Nro NUMERIC(18,0),
Factura_Fecha DATETIME,
);
GO

CREATE TABLE [DESCONOCIDOS4].RENDICION_REP (
Auto_Marca VARCHAR(255),
Auto_Modelo VARCHAR(255),
Auto_Patente VARCHAR(10),
Auto_Licencia VARCHAR(26),
Auto_Rodado VARCHAR(10),
Chofer_Nombre VARCHAR(255),
Chofer_Apellido VARCHAR(255),
Chofer_Dni  NUMERIC(18,0),
Chofer_Direccion VARCHAR(255),
Chofer_Telefono  NUMERIC(18,0),
Chofer_Mail VARCHAR(50),
Chofer_Fecha_Nac DATETIME,
Viaje_Cant_Kilometros  NUMERIC(18,0),
Viaje_Fecha DATETIME,
Turno_Hora_Inicio  NUMERIC(18,0),
Turno_Hora_Fin  NUMERIC(18,0),
Turno_Descripcion VARCHAR(255),
Turno_Valor_Kilometro  NUMERIC(18,2),
Turno_Precio_Base  NUMERIC(18,2),
Cliente_Nombre VARCHAR(255),
Cliente_Apellido VARCHAR(255),
Cliente_Dni  NUMERIC(18,0),
Cliente_Telefono  NUMERIC(18,0),
Cliente_Direccion VARCHAR(255),
Cliente_Mail VARCHAR(255),
Cliente_Fecha_Nac DATETIME,
Rendicion_Nro NUMERIC(18,0),
Rendicion_Fecha DATETIME,
Rendicion_Importe NUMERIC(18,2),
);
GO
CREATE TABLE [DESCONOCIDOS4].ROL(
Rol_Id SMALLINT NOT NULL IDENTITY(1,1), 
Rol_Nombre VARCHAR(255) NOT NULL,
Rol_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Rol_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].USUARIO_ROL(
UsuRol_Usu_Id INT REFERENCES [DESCONOCIDOS4].USUARIO,
UsuRol_Rol_Id SMALLINT REFERENCES [DESCONOCIDOS4].ROL,
);
GO
CREATE TABLE [DESCONOCIDOS4].FUNCIONALIDAD(
Func_Id INT IDENTITY(1,1),
Func_Descripcion VARCHAR(255),
Func_Metodo VARCHAR(255),
PRIMARY KEY(Func_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].RAMA_MENU(
Rama_Menu_Id INT NOT NULL IDENTITY(1,1),
Rama_Menu_Nombre VARCHAR(50) NOT NULL,
Rama_Menu_Ascendente INT REFERENCES [DESCONOCIDOS4].RAMA_MENU,
PRIMARY KEY(Rama_Menu_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].HOJA_MENU(
Hoja_Menu_Id INT NOT NULL IDENTITY(1,1),
Hoja_Menu_Nombre NVARCHAR(50) NOT NULL,
Hoja_Menu_Funcion INT REFERENCES [DESCONOCIDOS4].FUNCIONALIDAD NOT NULL,
Hoja_Menu_Ascendente INT REFERENCES [DESCONOCIDOS4].RAMA_MENU,
PRIMARY KEY(Hoja_Menu_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].FUNCIONALIDADXROL(
FuncRol_Rol_Id SMALLINT REFERENCES  [DESCONOCIDOS4].ROL(Rol_Id) NOT NULL,
FunRol_Func_Id INT REFERENCES [DESCONOCIDOS4].FUNCIONALIDAD(Func_Id )
NOT NULL,
);
GO


/*-------------------PROGRAMACION DE LA MIGRACION--------------------*/
-- FUNCIONES 
IF OBJECT_ID('[DESCONOCIDOS4].DAME_DNI_CLIENTE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].DAME_DNI_CLIENTE;
GO

CREATE FUNCTION [DESCONOCIDOS4].DAME_DNI_CLIENTE(@CLIENTE INT)
RETURNS NUMERIC(18,0)
AS
BEGIN
	DECLARE @DNI NUMERIC(18,0)
	SET @DNI = (SELECT PER.Persona_Dni  FROM DESCONOCIDOS4.CLIENTE CLI LEFT JOIN DESCONOCIDOS4.PERSONA PER ON PER.Persona_Id = CLI.Cliente_Per_ID WHERE CLI.Cliente_Id = @CLIENTE)
	 
RETURN @DNI
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].DAME_DNI_CHOFER','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].DAME_DNI_CHOFER;
GO

CREATE FUNCTION [DESCONOCIDOS4].DAME_DNI_CHOFER(@CHOFER INT)
RETURNS NUMERIC(18,0)
AS
BEGIN
	DECLARE @DNI NUMERIC (18,0)
	SET @DNI = (SELECT PER.Persona_Dni FROM DESCONOCIDOS4.CHOFER CH LEFT JOIN DESCONOCIDOS4.PERSONA PER ON PER.Persona_Id = CH.Chofer_Per_Id WHERE CH.Chofer_Id = @CHOFER)

RETURN @DNI
END
GO
IF OBJECT_ID('[DESCONOCIDOS4].FN_USU_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_USU_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_USU_X_DNI(@DNI INT)
RETURNS  INT
AS
BEGIN
	DECLARE @USU_ID INT
	SET @USU_ID = (SELECT Usu_Id  FROM DESCONOCIDOS4.USUARIO  LEFT JOIN DESCONOCIDOS4.PERSONA  ON Persona_Id = Usu_Per_Id WHERE Persona_Dni = @DNI)
	 
RETURN @USU_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE(@MARCA VARCHAR(255), @MODELO VARCHAR(255))
RETURNS  INT
AS
BEGIN
	DECLARE @MARCAMOD_ID INT
	SET @MARCAMOD_ID = (SELECT Marca_Modelo_Id  FROM DESCONOCIDOS4.MARCA_MODELO  
	LEFT JOIN DESCONOCIDOS4.MARCA ON Marca_Id=Marca_Modelo_Marca 
	LEFT JOIN DESCONOCIDOS4.MODELO ON Modelo_Id=Marca_Modelo_Modelo 
	WHERE Marca_Nombre=@MARCA AND Modelo_Nombre=@MODELO)
	 
RETURN @MARCAMOD_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(@PATENTE VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @AUTO_ID INT
	SET @AUTO_ID = (SELECT Auto_Id  FROM DESCONOCIDOS4.AUTO   WHERE Auto_Patente = @PATENTE)	 
RETURN @AUTO_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_CHOFER_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI(@DNI VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @CHOFER_ID INT
	SET @CHOFER_ID = (SELECT Chofer_Id  FROM DESCONOCIDOS4.CHOFER LEFT JOIN DESCONOCIDOS4.PERSONA  ON Chofer_Per_Id = Persona_Id WHERE Persona_Dni = @DNI)	 
RETURN @CHOFER_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI(@DNI VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @CLIENTE_ID INT
	SET @CLIENTE_ID = (SELECT Cliente_Id  FROM DESCONOCIDOS4.CLIENTE LEFT JOIN DESCONOCIDOS4.PERSONA  ON Cliente_Per_ID = Persona_Id WHERE Persona_Dni = @DNI)	 
RETURN @CLIENTE_ID
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES(@DESC VARCHAR(255))
RETURNS  INT
AS
BEGIN
	DECLARE @TURNO_ID INT
	SET @TURNO_ID = (SELECT DISTINCT Turno_Id  FROM DESCONOCIDOS4.TURNO T LEFT JOIN gd_esquema.Maestra M ON M.Turno_Descripcion = T.Turno_Descripcion WHERE T.Turno_Descripcion = @DESC)	 
RETURN @TURNO_ID
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_EXISTE_TEL','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_EXISTE_TEL;
GO
--BUSCA SI YA EXISTE EL TELEFONO, DEVUELVE 1 SI LO ENCUENTRA
CREATE FUNCTION [DESCONOCIDOS4].FN_EXISTE_TEL(@TEL NUMERIC(18,0))
RETURNS  SMALLINT 
AS
 BEGIN
 DECLARE @RESUL INT
  IF (SELECT COUNT(* )FROM [DESCONOCIDOS4].PERSONA WHERE Persona_Telefono=@TEL)>1
	 SET @RESUL=1
  ELSE 
	SET @RESUL=0
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_TOTAL_FACT','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TOTAL_FACT;
GO
--CALCULA DEL TOTAL DE LA FACTURA SUMANDO EL MONTO DE LOS VIAJES DE LOS  ITEMS FACTURADOS
CREATE FUNCTION [DESCONOCIDOS4].FN_TOTAL_FACT(@NRO_FAC  NUMERIC(18,0))
RETURNS  NUMERIC(18,2) 
AS
 BEGIN
 DECLARE @RESUL NUMERIC(18,2)
 SET @RESUL =(SELECT SUM(V.Viaje_Importe) FROM [DESCONOCIDOS4].ITEM_FACTURA F INNER JOIN [DESCONOCIDOS4].VIAJE V ON F.Item_Fac_Id_Viaje=V.Viaje_Nro WHERE F.Item_Fac_Nro_Fac=@NRO_FAC)
 RETURN @RESUL
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_TOTAL_REND','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TOTAL_REND;
GO
--CALCULA DEL TOTAL DE LA FACTURA SUMANDO EL MONTO DE LOS VIAJES DE LOS  ITEMS FACTURADOS
CREATE FUNCTION [DESCONOCIDOS4].FN_TOTAL_REND(@NRO_REND  NUMERIC(18,0))
RETURNS  NUMERIC(18,2) 
AS
 BEGIN
 DECLARE @RESUL NUMERIC(18,2)
 SET @RESUL =(SELECT SUM(V.Viaje_Importe*0.3) FROM [DESCONOCIDOS4].ITEM_RENDICION F INNER JOIN [DESCONOCIDOS4].VIAJE V ON F.Item_Rend_Viaje=V.Viaje_Nro WHERE F.Item_Rend_NroRend=@NRO_REND)
 RETURN @RESUL
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_CALCULA_PRECIO_VIAJE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_CALCULA_PRECIO_VIAJE;
GO
-- CALCULA EL PRECIO DEL VIAJE A PARTIR DEL TURNO Y DE LA CANTIDAD DE KILOMETROS RECORRIDOS
CREATE FUNCTION [DESCONOCIDOS4].FN_CALCULA_PRECIO_VIAJE(@TURNO INT, @CANT_KM NUMERIC(18,0))
RETURNS  NUMERIC(18,2) 
AS
 BEGIN
 DECLARE @RESUL NUMERIC(18,2)
 SET @RESUL= (SELECT Turno_Precio_Base+(Turno_Valor_Kilometro*@CANT_KM) FROM [DESCONOCIDOS4].TURNO WHERE Turno_Id=@TURNO)
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_DENTRO_TURNO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_DENTRO_TURNO;
GO
-- COMPRUEBA QUE UN RANGO DE HORARIOS ESTA DENTRO DEL TURNO
CREATE FUNCTION [DESCONOCIDOS4].FN_DENTRO_TURNO(@TURNO INT, @INICIO DATETIME, @FIN DATETIME)
RETURNS  CHAR(2) 
AS
 BEGIN
 DECLARE @RESUL CHAR(2)
 IF(SELECT COUNT(*) FROM [DESCONOCIDOS4].TURNO WHERE Turno_Id=@TURNO AND DATEPART(HOUR,@INICIO)>Turno_Hora_Inicio AND DATEPART(HOUR,@FIN)<Turno_Hora_Fin  ) >0
 SET @RESUL= 'SI'
 ELSE 
 SET @RESUL= 'NO'
 RETURN @RESUL
END
GO



IF OBJECT_ID('[DESCONOCIDOS4].FN_REGISTRO_VIAJE_OK','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_REGISTRO_VIAJE_OK;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_REGISTRO_VIAJE_OK(@Chof INT,@Clie INT,@Auto INT,@Turno INT,@Cant_KM NUMERIC(18,0),@Fecha_hora_ini DATETIME,@Fecha_hora_fin DATETIME)
RETURNS  CHAR(2) 
AS
BEGIN
	DECLARE @RESUL CHAR(2)	
	DECLARE @CONT INT	
	SET @CONT=0
	IF (SELECT Cliente_Habilitado FROM [DESCONOCIDOS4].CLIENTE WHERE Cliente_Id=@Clie )=1
	SET @CONT=@CONT+1
	IF (SELECT COUNT(*) FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE WHERE CONCAT(Uni_Dis_Chofer,Uni_Dis_Auto,Uni_Dis_Turno)=CONCAT(@Chof,@Auto,@Turno))=1
	SET @CONT=@CONT+1
	IF @Cant_KM >0
	SET @CONT=@CONT+1
	IF (SELECT COUNT(*) FROM[DESCONOCIDOS4].VIAJE WHERE Viaje_Cliente=@Clie AND Viaje_Fecha_Hora_Inicio=@Fecha_hora_ini AND Viaje_Fecha_Hora_Fin=@Fecha_hora_fin ) =0
	SET @CONT=@CONT+1
	IF @CONT=4 
	SET @RESUL='SI'
	ELSE
	SET @RESUL='NO'
	RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_TURNO_RANGO_OK','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TURNO_RANGO_OK;
GO
-- Devuelve 'SI' si el rango horario no se superpone con el de otro turno y 'NO' por el contrario
CREATE FUNCTION [DESCONOCIDOS4].FN_TURNO_RANGO_OK(@Hini INT,@Hfin INT)
RETURNS  CHAR(2) 
AS
BEGIN
  DECLARE @RESUL CHAR(2)	
  DECLARE @CONT INT	
  SET @CONT=0
  IF(SELECT COUNT(*) FROM [DESCONOCIDOS4].TURNO WHERE Turno_Hora_Inicio>=@Hini AND Turno_Hora_Fin<=@Hini)>1
  SET @CONT=@CONT+1
  IF(SELECT COUNT(*) FROM [DESCONOCIDOS4].TURNO WHERE Turno_Hora_Inicio>=@Hfin AND Turno_Hora_Fin<=@Hfin)>1
  SET @CONT=@CONT+1
  IF @CONT=0
  SET @RESUL='SI'
  ELSE 
  SET @RESUL='NO'
  RETURN @RESUL
END
GO
IF OBJECT_ID('[DESCONOCIDOS4].FN_TURNO_DENTRO_24','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TURNO_DENTRO_24;
GO
-- Devuelve 'SI' si turno no supera las 24hs, es decir, se encuentra dentro del mismo dia
CREATE FUNCTION [DESCONOCIDOS4].FN_TURNO_DENTRO_24(@Hini INT,@Hfin INT)
RETURNS  CHAR(2) 
AS
BEGIN
	DECLARE @RESUL CHAR(2)
	IF @Hfin>@Hini
	SET @RESUL ='SI'
	ELSE 
	SET @RESUL ='NO'
  RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_REG_TURNO_OK','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_REG_TURNO_OK;
GO
-- Devuelve 'SI' el registo del turno cumple con las reglas de negocio para ser insertado
CREATE FUNCTION [DESCONOCIDOS4].FN_REG_TURNO_OK(@Hini INT,@Hfin INT)
RETURNS  CHAR(2) 
AS
BEGIN
   DECLARE @RESUL CHAR(2)	
   IF[DESCONOCIDOS4].FN_TURNO_DENTRO_24(@Hini,@Hfin)='SI' AND [DESCONOCIDOS4].FN_TURNO_RANGO_OK(@Hini,@Hfin)='SI'
   SET @RESUL='SI'
   ELSE
   SET @RESUL='NO'
   RETURN @RESUL
END 
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_MARCAMOD_X_MARCA_MODELO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_MARCAMOD_X_MARCA_MODELO;
GO
-- DEVUELVE EL ID DE MARCAMODELO A TRAVES DE UNA MARCA Y MODELO
CREATE FUNCTION [DESCONOCIDOS4].FN_MARCAMOD_X_MARCA_MODELO(@MARCA INT, @MODELO INT)
RETURNS INT
AS
 BEGIN
 DECLARE @RESUL INT
 SET @RESUL =(SELECT Marca_Modelo_Id FROM [DESCONOCIDOS4].MARCA_MODELO WHERE CONCAT(Marca_Modelo_Marca,Marca_Modelo_Modelo)=CONCAT(@MARCA,@MODELO))
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_DETALLE_AUTO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_DETALLE_AUTO;
GO
-- DEVUELVE EL DETALLE DE UN AUTO A TRAVES DE UNA MARCA Y MODELO
CREATE FUNCTION [DESCONOCIDOS4].FN_DETALLE_AUTO(@MARCA INT, @MODELO INT)
RETURNS VARCHAR(255)
AS
 BEGIN
 DECLARE @RESUL VARCHAR(255)
 SET @RESUL =(SELECT Marca_Nombre+' '+Modelo_Nombre FROM [DESCONOCIDOS4].MODELO MD,[DESCONOCIDOS4].MARCA MC WHERE MC.Marca_Id=@MARCA AND MD.Modelo_Id=@MODELO)
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO;
GO
-- DEVUELVE 'SI' si el chofer ya esta asignado a ese turno.
CREATE FUNCTION [DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO(@CHOFER INT, @TURNO INT)
RETURNS CHAR(2)
AS
 BEGIN
 DECLARE @RESUL CHAR(2)
 IF (SELECT COUNT(*) FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE UD WHERE CONCAT(UD.Uni_Dis_Chofer,UD.Uni_Dis_Turno)= CONCAT(@CHOFER,@TURNO))>=1
 SET @RESUL ='SI'
 ELSE
 SET @RESUL ='NO'
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ASIGNACION_X_AUTO_TURNO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ASIGNACION_X_AUTO_TURNO;
GO
-- DEVUELVE 'SI' si el auto ya esta asignado a ese turno.
CREATE FUNCTION [DESCONOCIDOS4].FN_ASIGNACION_X_AUTO_TURNO(@AUTO INT, @TURNO INT)
RETURNS CHAR(2)
AS
 BEGIN
 DECLARE @RESUL CHAR(2)
 IF (SELECT COUNT(*) FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE UD WHERE CONCAT(UD.Uni_Dis_Chofer,UD.Uni_Dis_Turno)= CONCAT(@AUTO,@TURNO))>=1
 SET @RESUL ='SI'
 ELSE
 SET @RESUL ='NO'
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO;
GO
-- DEVUELVE 'SI' si el auto ya esta asignado a ese turno.
CREATE FUNCTION [DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO(@CHOFER INT)
RETURNS CHAR(2)
AS
 BEGIN
 DECLARE @RESUL CHAR(2)
 IF (SELECT COUNT(*) FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE UD WHERE UD.Uni_Dis_Chofer=@CHOFER)>=1
 SET @RESUL ='SI'
 ELSE
 SET @RESUL ='NO'
 RETURN @RESUL
END

GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_REMOVER_TILDES','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_REMOVER_TILDES;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_REMOVER_TILDES ( @Cadena VARCHAR(255) )
RETURNS VARCHAR(255)
AS BEGIN
      RETURN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(LOWER(@Cadena), 'á', 'a'), 'é','e'), 'í', 'i'), 'ó', 'o'), 'ú','u')
 
   END
 GO

 



/*------------------------- PROCEDIMIENTOS DE MIGRACION Y CARGA DE TABLAS -----------------------------------*/

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE;
GO
-- Se puebla la tabla PERSONA Y CLIENTE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE
AS
BEGIN TRANSACTION

INSERT INTO [DESCONOCIDOS4].PERSONA (Persona_Dni,Persona_Nombre
      ,Persona_Apellido,Persona_Direccion
      ,Persona_Piso,Persona_Departamento,Persona_Localidad
      ,Persona_Telefono,Persona_Mail,Persona_Cod_Postal
      ,Persona_Fecha_Nac) 
	  SELECT DISTINCT Cliente_Dni,Cliente_Nombre,Cliente_Apellido,Cliente_Direccion,'0','-','-',Cliente_Telefono,Cliente_Mail,'-',Cliente_Fecha_Nac FROM gd_esquema.Maestra
	  INSERT INTO  [DESCONOCIDOS4].CLIENTE (Cliente_Per_ID)
	  SELECT Persona_Id FROM [DESCONOCIDOS4].PERSONA
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER;
GO
-- Se puebla la tabla PERSONA Y CHOFER
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER
AS
BEGIN TRANSACTION

INSERT INTO [DESCONOCIDOS4].PERSONA (Persona_Dni,Persona_Nombre
      ,Persona_Apellido,Persona_Direccion
      ,Persona_Piso,Persona_Departamento,Persona_Localidad
      ,Persona_Telefono,Persona_Mail,Persona_Cod_Postal
      ,Persona_Fecha_Nac) 
	  SELECT DISTINCT Chofer_Dni,Chofer_Nombre,Chofer_Apellido,Chofer_Direccion,'0','-','-',Chofer_Telefono,Chofer_Mail,'-',Chofer_Fecha_Nac FROM gd_esquema.Maestra
	  INSERT INTO  [DESCONOCIDOS4].CHOFER (Chofer_Per_Id)
	  SELECT Persona_Id FROM [DESCONOCIDOS4].PERSONA WHERE PERSONA.Persona_Id NOT IN (SELECT Cliente_Per_ID FROM [DESCONOCIDOS4].CLIENTE )
COMMIT
GO
--USUARIO AUTOMATICO AL INSERTAR UN REGISTRO EN PERSONA
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_USUARIO_AUTOMATICO', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_USUARIO_AUTOMATICO;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_USUARIO_AUTOMATICO ON [DESCONOCIDOS4].PERSONA
FOR INSERT
AS
BEGIN TRANSACTION	
	INSERT INTO [DESCONOCIDOS4].USUARIO (Usu_Per_Id,Usu_Nombre_Usuario,Usu_Password)
	SELECT I.Persona_Id,
	CONCAT(UPPER(LEFT([DESCONOCIDOS4].FN_REMOVER_TILDES(I.Persona_Apellido),4)),UPPER(LEFT([DESCONOCIDOS4].FN_REMOVER_TILDES(I.Persona_Nombre),3)),I.Persona_Id),CONVERT(VARCHAR(256),HashBytes('SHA2_256', 'Inicio2017'),2) 
	FROM INSERTED I 

COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN;
GO
-- Se inserta usuario admin
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].USUARIO(Usu_Nombre_Usuario,Usu_Password) 
	  VALUES ('admin',CONVERT(VARCHAR(256),HashBytes('SHA2_256', 'w23e'),2))
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MARCA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MARCA;
GO
-- Se puebla la tabla MARCA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MARCA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MARCA (Marca_Nombre) 
	  SELECT DISTINCT Auto_Marca FROM gd_esquema.Maestra
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MODELO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MODELO;
GO
-- Se puebla la tabla MODELO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MODELO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MODELO (Modelo_Nombre,Modelo_Rodado) 
	  SELECT DISTINCT Auto_Modelo,Auto_Rodado FROM gd_esquema.Maestra
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO;
GO
-- Se puebla la tabla MARCA_MODELO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MARCA_MODELO (Marca_Modelo_Marca,Marca_Modelo_Modelo) 
	  SELECT DISTINCT Marca_Id,Modelo_Id FROM gd_esquema.Maestra 
	  LEFT JOIN [DESCONOCIDOS4].MARCA ON Marca_Nombre=Auto_Marca 
	  LEFT JOIN [DESCONOCIDOS4].MODELO ON Modelo_Nombre=Auto_Modelo
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_AUTO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_AUTO;
GO
-- Se puebla la tabla AUTO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_AUTO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].AUTO (Auto_Patente,Auto_Detalle,Auto_Marca_Modelo,Auto_Licencia) 
	  SELECT DISTINCT Auto_Patente,Auto_Marca+' '+Auto_Modelo,[DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE(Auto_Marca,Auto_Modelo),Auto_Licencia FROM gd_esquema.Maestra 
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_TURNO;
GO
-- Se puebla la tabla TURNO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_TURNO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].TURNO (Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base) 
	  SELECT DISTINCT Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base FROM gd_esquema.Maestra
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE;
GO
-- Se puebla la tabla UNIDAD_DISPONIBLE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].UNIDAD_DISPONIBLE(Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno) 
	  SELECT DISTINCT 
	  [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(Auto_Patente),
	  [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI(Chofer_Dni),
	  [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES(Turno_Descripcion) FROM gd_esquema.Maestra
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA;
GO
-- Se puebla la tabla CABECERO_FACTURA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_FACTURA (Cab_Fac_Nro,Cab_Fac_Fecha,Cab_Fac_Cliente,Cab_Fac_Fecha_Inicio,Cab_Fac_Fecha_Fin) 
	  SELECT 
		  DISTINCT
		  Factura_Nro,
		  Factura_Fecha,
		  (SELECT Cliente_Id FROM [DESCONOCIDOS4].CLIENTE LEFT JOIN  [DESCONOCIDOS4].PERSONA ON  Cliente_Per_ID=Persona_Id WHERE Persona_Dni= M.Cliente_Dni),
		  Factura_Fecha_Inicio,
		  Factura_Fecha_Fin 
	  FROM gd_esquema.Maestra M WHERE Factura_Nro>0
COMMIT
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_VIAJE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_VIAJE;
GO
-- Se puebla la tabla VIAJE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_VIAJE
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].VIAJE (Viaje_Chofer,Viaje_Cliente,Viaje_Automovil,Viaje_Turno,Viaje_Precio_Base,Viaje_Valor_km,Viaje_Importe,Viaje_Cantidad_Km,Viaje_Fecha_Hora_Inicio,Viaje_Fecha_Hora_Fin) 
	  SELECT 
		  DISTINCT
		  (SELECT Chofer_Id FROM CHOFER LEFT JOIN PERSONA ON Persona_Id=Chofer_Per_Id WHERE M.Chofer_Dni=Persona_Dni),	
		  (SELECT Cliente_Id FROM CLIENTE LEFT JOIN PERSONA ON Persona_Id=Cliente_Per_ID WHERE M.Cliente_Dni=Persona_Dni),	  
		  [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(Auto_Patente),
		  (SELECT Turno_Id FROM TURNO T 
			WHERE CONCAT(M.Turno_Descripcion,M.Turno_Hora_Inicio,M.Turno_Hora_Fin,M.Turno_Precio_Base,M.Turno_Valor_Kilometro)=CONCAT(T.Turno_Descripcion,T.Turno_Hora_Inicio,T.Turno_Hora_Fin,T.Turno_Precio_Base,T.Turno_Valor_Kilometro) ),
		  M.Turno_Precio_Base,
		  M.Turno_Valor_Kilometro,
		  M.Turno_Precio_Base+(M.Turno_Valor_Kilometro*M.Viaje_Cant_Kilometros),
		  M.Viaje_Cant_Kilometros,
		  M.Viaje_Fecha,
		  DATEADD(SECOND,1,M.Viaje_Fecha)
	  FROM gd_esquema.Maestra M WHERE M.Factura_Nro IS NULL AND M.Rendicion_Nro IS NULL ORDER BY M.Viaje_Fecha ASC
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_VIAJE_REP', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_VIAJE_REP;
GO
-- Se puebla la tabla VIAJE_REP
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_VIAJE_REP
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].VIAJE_REP
	SELECT Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac
	FROM gd_esquema.Maestra M WHERE M.Factura_Nro IS NULL AND M.Rendicion_Nro IS NULL   GROUP BY
	Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac
	HAVING count(*) > 1
	ORDER BY M.Viaje_Fecha ASC
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA;
GO
-- Se puebla la tabla ITEM_FACTURA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].ITEM_FACTURA(Item_Fac_Nro_Fac,Item_Fac_Item,Item_Fac_Id_Viaje) 
	  SELECT 
	  DISTINCT 
		  M2.Factura_Nro, 
		  ROW_NUMBER() OVER (PARTITION BY M2.Factura_Nro ORDER BY M2.Factura_Nro),
		  S.Viaje_Nro 
	  FROM gd_esquema.Maestra M2 LEFT JOIN  
	  (SELECT Viaje_Nro,Viaje_Fecha_Hora_Inicio,Viaje_Cantidad_Km,P1.Persona_Dni AS DNI_CLIENTE ,P2.Persona_Dni AS DNI_CHOFER,Viaje_Automovil  FROM [DESCONOCIDOS4].VIAJE
		   
		LEFT JOIN  [DESCONOCIDOS4].CLIENTE ON Viaje_Cliente= Cliente_Id LEFT JOIN [DESCONOCIDOS4].CHOFER ON Viaje_Chofer=Chofer_Id
		LEFT JOIN  [DESCONOCIDOS4].PERSONA P1 ON P1.Persona_Id= Cliente_Per_ID LEFT JOIN [DESCONOCIDOS4].PERSONA P2 ON P2.Persona_Id= Chofer_Per_Id) S
		ON  CONCAT(M2.Viaje_Fecha,M2.Viaje_Cant_Kilometros,M2.Cliente_Dni,M2.Chofer_Dni,[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(M2.Auto_Patente))=CONCAT(Viaje_Fecha_Hora_Inicio,Viaje_Cantidad_Km,DNI_CLIENTE,DNI_CHOFER,Viaje_Automovil)
	 
	 WHERE M2.Factura_Nro>0 AND M2.Rendicion_Nro IS NULL  GROUP BY M2.Factura_Nro,S.Viaje_Nro ORDER BY M2.Factura_Nro,S.Viaje_Nro
COMMIT
go
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_FACTURA_REP', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_FACTURA_REP;
GO
-- Se puebla la tabla FACTURA_REP
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_FACTURA_REP
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].FACTURA_REP
	SELECT Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac,Factura_Fecha_Inicio,Factura_Fecha_Fin,Factura_Nro,Factura_Fecha
	FROM gd_esquema.Maestra M WHERE M.Factura_Nro>0 AND M.Rendicion_Nro IS NULL   GROUP BY
	Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac,Factura_Fecha_Inicio,Factura_Fecha_Fin,Factura_Nro,Factura_Fecha
	HAVING count(*) > 1
	ORDER BY M.Viaje_Fecha ASC
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_RENDICION_REP', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_RENDICION_REP;
GO
-- Se puebla la tabla RENDICION_REP
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_RENDICION_REP
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].RENDICION_REP
	SELECT Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac,Rendicion_Nro,Rendicion_Fecha,Rendicion_Importe
	FROM gd_esquema.Maestra M WHERE M.Rendicion_Nro>0 AND M.Factura_Nro IS NULL   GROUP BY
	Auto_Marca,Auto_Modelo,Auto_Patente,Auto_Licencia,Auto_Rodado,Chofer_Nombre,Chofer_Apellido,Chofer_Dni,Chofer_Direccion,Chofer_Telefono,Chofer_Mail,Chofer_Fecha_Nac,
	Viaje_Cant_Kilometros,Viaje_Fecha,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Cliente_Nombre,Cliente_Apellido,Cliente_Dni,Cliente_Telefono,
	Cliente_Direccion,Cliente_Mail,Cliente_Fecha_Nac,Rendicion_Nro,Rendicion_Fecha,Rendicion_Importe
	HAVING count(*) > 1
	ORDER BY M.Viaje_Fecha ASC
COMMIT;
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION;
GO
-- Se puebla la tabla CABECERO_RENDICION
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_RENDICION(Cab_Rend_Nro,Cab_Rend_Turno,Cab_Rend_Chofer,Cab_Rend_Fecha,Cab_Rend_Importe) 
	  SELECT 
		  DISTINCT
		  M.Rendicion_Nro,
		  (SELECT DISTINCT Turno_Id FROM [DESCONOCIDOS4].TURNO T LEFT JOIN  gd_esquema.Maestra M2 
			ON CONCAT(M2.Turno_Hora_Inicio,M2.Turno_Hora_Fin,M2.Turno_Descripcion,M2.Turno_Valor_Kilometro,M2.Turno_Precio_Base) =
				CONCAT(T.Turno_Hora_Inicio,T.Turno_Hora_Fin,T.Turno_Descripcion,T.Turno_Valor_Kilometro,T.Turno_Precio_Base) WHERE M2.Rendicion_Nro=M.Rendicion_Nro ),
		  (SELECT Chofer_Id FROM [DESCONOCIDOS4].CHOFER LEFT JOIN  [DESCONOCIDOS4].PERSONA ON  Chofer_Per_Id=Persona_Id WHERE Persona_Dni= M.Chofer_Dni),
		  M.Rendicion_Fecha,
		  sum(M.Rendicion_Importe)
	  FROM gd_esquema.Maestra M WHERE M.Rendicion_Nro>0 GROUP BY  M.Rendicion_Nro,M.Chofer_Dni,M.Rendicion_Fecha
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION;
GO
-- Se puebla la tabla ITEM_RENDICION
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].ITEM_RENDICION(Item_Rend_NroRend,Item_Rend_Pos,Item_Rend_Viaje) 
	  SELECT 
	  DISTINCT 
		  M2.Rendicion_Nro, 
		  ROW_NUMBER() OVER (PARTITION BY M2.Rendicion_Nro ORDER BY M2.Rendicion_Nro),
		  Viaje_Nro 
	  FROM [DESCONOCIDOS4].VIAJE LEFT JOIN  [DESCONOCIDOS4].CLIENTE ON Viaje_Cliente= Cliente_Id LEFT JOIN [DESCONOCIDOS4].CHOFER ON Viaje_Chofer=Chofer_Id
	LEFT JOIN  [DESCONOCIDOS4].PERSONA P1 ON P1.Persona_Id= Cliente_Per_ID LEFT JOIN [DESCONOCIDOS4].PERSONA P2 ON P2.Persona_Id= Chofer_Per_Id
	LEFT JOIN gd_esquema.Maestra M2
	 ON  CONCAT(M2.Viaje_Fecha,M2.Viaje_Cant_Kilometros,M2.Cliente_Dni,M2.Chofer_Dni,[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(M2.Auto_Patente))=CONCAT(Viaje_Fecha_Hora_Inicio,Viaje_Cantidad_Km,P1.Persona_Dni,P2.Persona_Dni,Viaje_Automovil) 
	 WHERE M2.Rendicion_Nro>0 AND M2.Factura_Nro IS NULL  GROUP BY M2.Rendicion_Nro,Viaje_Nro ORDER BY M2.Rendicion_Nro,Viaje_Nro
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_ROLES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_ROLES;
GO
--Se pueba la tabla  ROLES
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_ROLES 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('ADMINISTRATIVO')
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('CHOFER')
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('CLIENTE')
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES;
GO
--Se pueba la tabla  FUNCIONALIDAD
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('agregarCliente', 'Dar de alta un Cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('eliminarCliente','Dar de baja un Cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('modificarCliente','Dar de modificar un Cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('agregarChofer','Dar de alta un Chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('eliminarChofer','Dar de baja un Chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('modificarChofer','Dar de modificar un Chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('agregarAutomovil','Dar de alta un Automovil')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('eliminarAutomovil','Dar de modificar un Automovil')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('modificarAutomovil','Dar de modificar un Automovil')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('agregarRol','Dar de alta un Rol')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('eliminarRol','Dar de modificar un Rol')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('modificarRol','Dar de modificar un Rol')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('facturarCliente','Facturar a Cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('rendicionChofer','Rendicion a Chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('choferMayorRecaudacion','Listado Chofer con Mayor Recaudacion')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('choferViajeMasLargo','Listado de Viaje mas largo')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('clienteMayorConsumo','Listado Cliente con Mayor Consumo')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('clienteMismoMovil','Listado Cliente con Movil utilizado mas veces en viajes')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Metodo,Func_Descripcion) VALUES ('registroViajes','Registro de viajes')
COMMIT;
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL;
GO
-- Se puebla la tabla FUNCIONALIDADXROL
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='ADMINISTRATIVO'	
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='CHOFER'AND Func_Id= 3
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='CLIENTE'AND Func_Id=2

COMMIT;
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL;
GO
-- Se puebla la tabla USUARIO_ROL
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT [DESCONOCIDOS4].FN_USU_X_DNI([DESCONOCIDOS4].DAME_DNI_CLIENTE(Cliente_Id)),Rol_Id FROM [DESCONOCIDOS4].ROL, [DESCONOCIDOS4].CLIENTE
	 WHERE Rol_Nombre='CLIENTE'		
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT [DESCONOCIDOS4].FN_USU_X_DNI([DESCONOCIDOS4].DAME_DNI_CHOFER(Chofer_Id)),Rol_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].CHOFER 
	WHERE Rol_Nombre='CHOFER'
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT Usu_Id,Rol_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].USUARIO 
	WHERE Rol_Nombre='ADMINISTRATIVO' AND Usu_Nombre_Usuario='admin'
COMMIT;
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA;
GO
-- Se actualiza el importe total de la factura 
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA
AS
BEGIN TRAN
	UPDATE [DESCONOCIDOS4].CABECERO_FACTURA SET Cab_Fac_Total_Fac= [DESCONOCIDOS4].FN_TOTAL_FACT(Cab_Fac_Nro)
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION;
GO
-- Se actualiza el importe total de la rendicion
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION
AS
BEGIN TRAN
	UPDATE [DESCONOCIDOS4].CABECERO_RENDICION SET Cab_Rend_Importe= [DESCONOCIDOS4].FN_TOTAL_REND(Cab_Rend_Nro)
COMMIT;
GO

IF OBJECT_ID ('[DESCONOCIDOS4].PRC_CARGAR_RAMA_MENU', 'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_RAMA_MENU;
GO
--Se pueba la tabla  RAMA_MENU
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_RAMA_MENU 
AS
BEGIN TRANSACTION
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre) VALUES('ABM')
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre) VALUES('Facturacion y Rendicion')
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre) VALUES('Listados')
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre) VALUES('Registros')
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Cliente',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM'))
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Chofer',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM'))
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Rol',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM'))
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Automovil',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM'))
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Chofer',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados'))
INSERT [DESCONOCIDOS4].RAMA_MENU (Rama_Menu_Nombre,Rama_Menu_Ascendente) VALUES('Cliente',(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados'))
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_HOJA_MENU', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_HOJA_MENU;
GO
--Se pueba la tabla  HOJA_MENU
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_HOJA_MENU 
AS
BEGIN TRANSACTION
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Agregar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='agregarCliente'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Cliente' and
	 Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Eliminar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='eliminarCliente'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Cliente' 
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Modificar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='modificarCliente'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Cliente' 
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Agregar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='agregarChofer'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Chofer' 
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Eliminar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='eliminarChofer')
	,(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Chofer'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Modificar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='modificarChofer'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Chofer'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Agregar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='agregarAutomovil')
	,(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Automovil'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Eliminar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='eliminarAutomovil')
	,(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Automovil'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Modificar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='modificarAutomovil'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Automovil'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Agregar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='agregarRol'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Rol'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Eliminar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='eliminarRol'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Rol'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Modificar',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='modificarRol'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Rol'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='ABM')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Facturar a Cliente',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='facturarCliente'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Facturacion y Rendicion'))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Rendicion a Chofer',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='rendicionChofer'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Facturacion y Rendicion'))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Mayor Recaudacion',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='choferMayorRecaudacion'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Chofer'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Viaje mas largo',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='choferViajeMasLargo'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Chofer'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Mayor Recaudacion',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='clienteMayorConsumo'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Cliente'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Viaje mas largo',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='clienteMismoMovil'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Cliente'
	and Rama_Menu_Ascendente=(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Listados')))
INSERT [DESCONOCIDOS4].HOJA_MENU (Hoja_Menu_Nombre,Hoja_Menu_Funcion,Hoja_Menu_Ascendente) VALUES('Viajes',
	(SELECT Func_Id FROM [DESCONOCIDOS4].FUNCIONALIDAD WHERE Func_Metodo='registroViajes'),
	(SELECT Rama_Menu_Id FROM [DESCONOCIDOS4].RAMA_MENU WHERE Rama_Menu_Nombre='Registros'))
COMMIT;
GO


-- EJECUCION DE MIGRACION

EXEC [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE
EXEC [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER
EXEC [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN
EXEC [DESCONOCIDOS4].PRC_MIGRA_MARCA
EXEC [DESCONOCIDOS4].PRC_MIGRA_MODELO
EXEC [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO
EXEC [DESCONOCIDOS4].PRC_MIGRA_AUTO
EXEC [DESCONOCIDOS4].PRC_MIGRA_TURNO
EXEC [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE
EXEC [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA
EXEC [DESCONOCIDOS4].PRC_MIGRA_VIAJE
EXEC [DESCONOCIDOS4].PRC_MIGRA_VIAJE_REP
EXEC [DESCONOCIDOS4].PRC_MIGRA_RENDICION_REP
EXEC [DESCONOCIDOS4].PRC_MIGRA_FACTURA_REP
EXEC [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA
EXEC [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION
EXEC [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION
EXEC [DESCONOCIDOS4].PRC_CARGAR_ROLES
EXEC [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES 
EXEC [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL 
EXEC [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL
EXEC [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA
EXEC [DESCONOCIDOS4].PRC_CARGAR_RAMA_MENU
EXEC [DESCONOCIDOS4].PRC_CARGAR_HOJA_MENU



-- FIN MIGRACION

/*--------------------------------- PROGRAMACION DE LA APP ------------------------------*/



/*------------------------------------------ABM CLIENTE----------------------------------------------------*/
-- ALTA DE CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CLIENTE
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), --  verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME
AS 
BEGIN TRANSACTION 
 INSERT INTO  [DESCONOCIDOS4].PERSONA VALUES (
		@DNI,
		@Nom,
		@Ape,
		@Dir_calle,
		@Dir_nro_piso,
		@Dir_depto,
		@localidad,
		@Cod_Pos,
		@Tel,
		@Mail,
		@Fec_nac)
 INSERT INTO [DESCONOCIDOS4].CLIENTE VALUES(SCOPE_IDENTITY(),1)

 DECLARE @PERSONA_ID INT
 SET @PERSONA_ID = (SELECT TOP 1 Persona_Id FROM DESCONOCIDOS4.PERSONA ORDER BY Persona_Id DESC)
 
 
 SELECT  Usu_Nombre_Usuario AS NOM_USUARIO, Usu_Password AS PASS_USUARIO FROM DESCONOCIDOS4.USUARIO WHERE Usu_Per_Id = @PERSONA_ID
 COMMIT;
 GO


 --BAJA CLIENTE  
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_CLIENTE
@ID_CLI INT
AS
BEGIN TRANSACTION 
  UPDATE [DESCONOCIDOS4].CLIENTE SET Cliente_Habilitado=0 WHERE Cliente_Id=@ID_CLI
COMMIT;
GO

-- MODIFICACION CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE
@PERS_ID INT,-- Debe ser introducido por la app es devuelta por el listado de busqueda
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), -- verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME,
@Habilitar BIT
AS 
BEGIN TRANSACTION 	
	
	UPDATE [DESCONOCIDOS4].PERSONA SET  Persona_Dni = @DNI,Persona_Nombre=@Nom,Persona_Apellido=@Ape,Persona_Direccion=@Dir_calle,Persona_Piso=@Dir_nro_piso,
	Persona_Departamento=@Dir_depto,Persona_Localidad=@localidad,Persona_Cod_Postal=@Cod_Pos,Persona_Telefono=@Tel,Persona_Mail=@Mail,Persona_Fecha_Nac=@Fec_nac
	WHERE PERSONA.Persona_Id=@PERS_ID
	UPDATE [DESCONOCIDOS4].CLIENTE SET Cliente_Habilitado=@Habilitar
	WHERE Cliente_Per_ID=@PERS_ID
COMMIT;
GO

--BUSCAR CLIENTES EXISTENTES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BUSCAR_CLIENTES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BUSCAR_CLIENTES;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BUSCAR_CLIENTES
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN
	IF (@DNI IS NOT NULL)
	BEGIN
	 SELECT 
	   Persona_Id
	  ,Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Departamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  ,Cliente_Id [idTipoRol]
	  ,Cliente_Habilitado [habilitado]
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CLIENTE C ON C.Cliente_Per_ID= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%')         
              AND convert(varchar(50),P.Persona_Dni) LIKE convert(varchar(50),@DNI);
	END
	ELSE
	BEGIN
	SELECT 
	   Persona_Id
	  ,Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Departamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  ,Cliente_Id [idTipoRol]
	  ,Cliente_Habilitado [habilitado]
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CLIENTE C ON C.Cliente_Per_ID= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%');
	END
END
GO

-- DAR DE ALTA CLIENTE SIENDO CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER
 @Per_id INT -- Se obtiene cuando se busca al cliente chofer para modificar es el campo 1
AS
BEGIN TRANSACTION
            INSERT INTO [DESCONOCIDOS4].CLIENTE (Cliente_Per_ID) VALUES(@Per_id);
 COMMIT;
 GO


 --FACTURAR A CLIENTE CUANDO SE DA DE BAJA
 IF OBJECT_ID (N'[DESCONOCIDOS4].TR_FACTURAR_BAJA_CLIENTE', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_FACTURAR_BAJA_CLIENTE;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_FACTURAR_BAJA_CLIENTE ON [DESCONOCIDOS4].CLIENTE
FOR UPDATE
AS
BEGIN 
DECLARE @ESTADO_VIEJO INT
SET @ESTADO_VIEJO = (SELECT Cliente_Habilitado FROM DELETED)

DECLARE @CLIENTE INT
SET @CLIENTE = (SELECT Cliente_Id FROM DELETED)

DECLARE @FECHA_HASTA DATE
SET @FECHA_HASTA = GETDATE()

DECLARE @ESTADO_NUEVO INT
SET @ESTADO_NUEVO = (SELECT Cliente_Habilitado FROM INSERTED)	
	
	IF(@ESTADO_VIEJO = 1 AND @ESTADO_NUEVO=0)
		
		
		EXECUTE [DESCONOCIDOS4].PRC_INSERTAR_FACTURA @CLIENTE, @FECHA_HASTA 
	
END
GO

-- Test the trigger.
/*
SELECT * FROM DESCONOCIDOS4.CLIENTE

UPDATE DESCONOCIDOS4.CLIENTE
SET Cliente_Habilitado = 0
WHERE Cliente_Id = 1;
GO
*/



/*------------------------------------------ABM CHOFER----------------------------------------------------*/
-- ALTA DE CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CHOFER
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), 
@Mail VARCHAR(255),
@Fec_nac DATETIME
AS 
BEGIN TRANSACTION 
 INSERT INTO  [DESCONOCIDOS4].PERSONA VALUES (
		@DNI,
		@Nom,
		@Ape,
		@Dir_calle,
		@Dir_nro_piso,
		@Dir_depto,
		@localidad,
		@Cod_Pos,
		@Tel,
		@Mail,
		@Fec_nac)
 INSERT INTO [DESCONOCIDOS4].CHOFER VALUES(SCOPE_IDENTITY(),1)

 DECLARE @PERSONA_ID INT
 SET @PERSONA_ID = (SELECT TOP 1 Persona_Id FROM DESCONOCIDOS4.PERSONA ORDER BY Persona_Id DESC)
 
 
 SELECT  Usu_Nombre_Usuario AS NOM_USUARIO, Usu_Password AS PASS_USUARIO FROM DESCONOCIDOS4.USUARIO WHERE Usu_Per_Id = @PERSONA_ID
 COMMIT;
 GO

 --BAJA CHOFER  
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_CHOFER
@ID_CHO INT
AS
BEGIN TRANSACTION 
  UPDATE [DESCONOCIDOS4].CHOFER  SET Chofer_Habilitado=0 WHERE Chofer_Id=@ID_CHO
COMMIT;
GO

-- MODIFICACION CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_CHOFER
@PERS_ID INT,-- Debe ser introducido por la app , es devuelta por el listado de busqueda
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), -- verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME,
@Habilitar BIT
AS 
BEGIN TRANSACTION 	
	
	UPDATE [DESCONOCIDOS4].PERSONA SET  Persona_Dni = @DNI,Persona_Nombre=@Nom,Persona_Apellido=@Ape,Persona_Direccion=@Dir_calle,Persona_Piso=@Dir_nro_piso,
	Persona_Departamento=@Dir_depto,Persona_Localidad=@localidad,Persona_Cod_Postal=@Cod_Pos,Persona_Telefono=@Tel,Persona_Mail=@Mail,Persona_Fecha_Nac=@Fec_nac
	WHERE PERSONA.Persona_Id=@PERS_ID
	UPDATE [DESCONOCIDOS4].CHOFER SET Chofer_Habilitado=@Habilitar
	WHERE Chofer_Per_Id=@PERS_ID
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_OBTENER_DATOS_USUARIOS', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_OBTENER_DATOS_USUARIOS;
GO
CREATE PROC [DESCONOCIDOS4].PRC_OBTENER_DATOS_USUARIOS
(
	@TipoUsuario VARCHAR(10),
	@Nom VARCHAR(255),
	@Ape VARCHAR(255),
	@DNI NUMERIC(18,0)
)
AS
BEGIN
IF (@TipoUsuario = 'Cliente')
	BEGIN
		EXEC [DESCONOCIDOS4].PRC_BUSCAR_CLIENTES @Nom, @Ape, @DNI
	END
ELSE
	BEGIN
		EXEC [DESCONOCIDOS4].PRC_BUSCAR_CHOFER @Nom, @Ape, @DNI
	END
END
GO
--BUSCAR CHOFER EXISTENTES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BUSCAR_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BUSCAR_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BUSCAR_CHOFER
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN
	IF (@DNI IS NOT NULL)
	BEGIN
	 SELECT 
	   Persona_Id
	  ,Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Departamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  ,Chofer_Id [idTipoRol]
	  ,Chofer_Habilitado [habilitado]
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CHOFER C ON C.Chofer_Per_Id= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%')         
			  AND convert(varchar(50),P.Persona_Dni) LIKE convert(varchar(50),@DNI);
	END
	ELSE
	BEGIN
		SELECT 
	   Persona_Id
	  ,Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Departamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  ,Chofer_Id [idTipoRol]
	  ,Chofer_Habilitado [habilitado]
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CHOFER C ON C.Chofer_Per_Id= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%');
	END
END
GO
-- DAR DE ALTA CHOFER SIENDO CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI
 @Per_id INT -- Se obtiene cuando se busca al cliente chofer para modificar es el campo 1
AS
BEGIN TRANSACTION
            INSERT INTO [DESCONOCIDOS4].CHOFER (Chofer_Per_Id) VALUES(@Per_id);
 COMMIT;
 GO


 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_OBTENER_ID_CLIENTE_O_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_OBTENER_ID_CLIENTE_O_CHOFER;
GO
CREATE PROC [DESCONOCIDOS4].PRC_OBTENER_ID_CLIENTE_O_CHOFER
(
	@IdUsuario INT,
	@IdRol INT
)
AS
BEGIN
DECLARE @TipoUsuario VARCHAR(50)
SET @TipoUsuario = (SELECT ROL_NOMBRE FROM DESCONOCIDOS4.ROL WHERE Rol_Id=@IdRol)
IF (@TipoUsuario = 'CLIENTE')
	BEGIN
		SELECT Cliente_Id [id] FROM DESCONOCIDOS4.Usuario U join [DESCONOCIDOS4].USUARIO_ROL on U.Usu_Id=UsuRol_Usu_Id
			join DESCONOCIDOS4.ROL on UsuRol_Rol_Id = Rol_Id join DESCONOCIDOS4.Cliente C on c.cliente_Per_Id=U.Usu_Per_Id
			WHERE Rol_Habilitado=1 and UsuRol_Usu_Id=@IdUsuario and Rol_Id=@IdRol and c.cliente_Habilitado=1
	END
ELSE
	BEGIN
		IF (@TipoUsuario = 'CHOFER')
		BEGIN
			SELECT Chofer_Id [id] FROM DESCONOCIDOS4.Usuario U join [DESCONOCIDOS4].USUARIO_ROL on U.Usu_Id=UsuRol_Usu_Id 
				join DESCONOCIDOS4.ROL on UsuRol_Rol_Id = Rol_Id join DESCONOCIDOS4.CHOFER C on c.Chofer_Per_Id=U.Usu_Per_Id
				WHERE Rol_Habilitado=1 and UsuRol_Usu_Id =@IdUsuario and Rol_Id=@IdRol and c.Chofer_Habilitado=1
		END
		ELSE
			SELECT -1 [id]
	END
END
GO

--LISTAR CHOFER POR TURNO HABILITADOS
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTA_CHOFER_X_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTA_CHOFER_X_TURNO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTA_CHOFER_X_TURNO
@TurnoId INT
AS
BEGIN
	
	 SELECT 
	   Chofer_Id [id]
	  ,Persona_Dni		AS Cho_DNI
      ,Persona_Nombre	AS Cho_Nom
      ,Persona_Apellido	AS Cho_Ape
        FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CHOFER C ON C.Chofer_Per_Id= P.Persona_Id
		LEFT JOIN UNIDAD_DISPONIBLE UD ON UD.Uni_Dis_Chofer=C.Chofer_Id
	  WHERE C.Chofer_Habilitado = 1 AND UD.Uni_Dis_Turno=@TurnoId
END
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTA_CHOFERES_NO_ASIG', N'P') IS NOT NULL
DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTA_CHOFERES_NO_ASIG;
GO

CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTA_CHOFERES_NO_ASIG
AS
BEGIN 
TRANSACTION
SELECT 
	CH.Chofer_Id	AS CHOFER_ID,
	PER.Persona_Dni AS CHOFER_DNI,
	PER.Persona_Nombre	AS CHOFER_NOMBRE,
	PER.Persona_Apellido	AS CHOFER_APELLIDO
FROM DESCONOCIDOS4.CHOFER CH
LEFT JOIN DESCONOCIDOS4.PERSONA PER ON PER.Persona_Id = CH.Chofer_Per_Id
WHERE [DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO(CH.Chofer_Id)='NO'
COMMIT
GO


/*------------------------------------------REGISTRAR VIAJE----------------------------------------------------*/
 -- REGISTRO VIAJES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_REGISTRO_VIAJE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_REGISTRO_VIAJE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_REGISTRO_VIAJE
@Chof INT,
@Clie INT,
@Auto INT,
@Turno INT,
@Cant_KM NUMERIC(18,0),
@Fecha_hora_ini DATETIME,
@Fecha_hora_fin DATETIME
AS 
BEGIN TRANSACTION 
 INSERT INTO  [DESCONOCIDOS4].VIAJE (Viaje_Chofer,Viaje_Cliente,Viaje_Automovil,Viaje_Turno,Viaje_Precio_Base,Viaje_Valor_km,Viaje_Importe,Viaje_Cantidad_Km,Viaje_Fecha_Hora_Inicio,Viaje_Fecha_Hora_Fin) 
 VALUES (
		@Chof,
		@Clie,
		@Auto,
		@Turno,
		(SELECT Turno_Precio_Base FROM [DESCONOCIDOS4].TURNO WHERE Turno_Id=@Turno),
		(SELECT Turno_Valor_Kilometro FROM [DESCONOCIDOS4].TURNO WHERE Turno_Id=@Turno),
		[DESCONOCIDOS4].FN_CALCULA_PRECIO_VIAJE(@Turno,@Cant_KM),
		@Cant_KM,
		@Fecha_hora_ini,
		@Fecha_hora_fin 
		)
 COMMIT;
 GO
 -- TRIGGER PARA REGISTRAR VIAJES CORRECTAMENTE

IF OBJECT_ID (N'[DESCONOCIDOS4].TR_REGISTRO_VIAJE', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_REGISTRO_VIAJE;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_REGISTRO_VIAJE ON [DESCONOCIDOS4].VIAJE
INSTEAD OF  INSERT
AS
BEGIN 
	
		DECLARE @Chof INT
		DECLARE @Clie INT
		DECLARE @Auto INT
		DECLARE @Turno INT
		DECLARE @Cant_KM NUMERIC(18,0)
		DECLARE @Fecha_hora_ini DATETIME
		DECLARE @Fecha_hora_fin DATETIME
		SET @Chof= (SELECT I.Viaje_Chofer FROM INSERTED I)
		SET @Clie= (SELECT I.Viaje_Cliente FROM INSERTED I)
		SET @Auto= (SELECT I.Viaje_Automovil FROM INSERTED I)
		SET @Turno= (SELECT I.Viaje_Turno FROM INSERTED I)
		SET @Cant_KM= (SELECT I.Viaje_Cantidad_Km FROM INSERTED I)
		SET @Fecha_hora_ini= (SELECT I.Viaje_Fecha_Hora_Inicio FROM INSERTED I)
		SET @Fecha_hora_fin= (SELECT I.Viaje_Fecha_Hora_Fin FROM INSERTED I)
		
		IF [DESCONOCIDOS4].FN_REGISTRO_VIAJE_OK(@Chof,@Clie,@Auto,@Turno,@Cant_KM,@Fecha_hora_ini,@Fecha_hora_fin)='SI'
		INSERT INTO [DESCONOCIDOS4].VIAJE (Viaje_Chofer,Viaje_Cliente,Viaje_Automovil,Viaje_Turno,Viaje_Precio_Base,Viaje_Valor_km,Viaje_Importe,Viaje_Cantidad_Km,Viaje_Fecha_Hora_Inicio,Viaje_Fecha_Hora_Fin)
		SELECT Viaje_Chofer,Viaje_Cliente,Viaje_Automovil,Viaje_Turno,Viaje_Precio_Base,Viaje_Valor_km,Viaje_Importe,Viaje_Cantidad_Km,Viaje_Fecha_Hora_Inicio,Viaje_Fecha_Hora_Fin FROM INSERTED
		ELSE 
		raiserror('Existen inconsistencias en los datos', 16, 1)	
END
GO

/*---------------------------------------- ABM  TURNO -------------------*/
-- ALTA DE TURNO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_TURNO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_TURNO
@HIni INT,
@HFin INT,
@Descripcion VARCHAR(255),
@Precio_Base NUMERIC(18,2),
@Valor_Km NUMERIC(18,2),
@Habilitado BIT
AS 
BEGIN TRAN
	INSERT INTO DESCONOCIDOS4.TURNO (Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Precio_Base,Turno_Valor_Kilometro,Turno_Habilitado)
	VALUES(@HIni,@HFin,@Descripcion,@Precio_Base,@Valor_Km,@Habilitado)
COMMIT;
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_ALTA_TURNO', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_ALTA_TURNO;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_ALTA_TURNO ON [DESCONOCIDOS4].TURNO
INSTEAD OF  INSERT
AS
BEGIN 
	DECLARE @Hini INT
	DECLARE @Hfin INT
	SET @Hini= (SELECT I.Turno_Hora_Inicio FROM INSERTED I) 
	SET @Hfin= (SELECT I.Turno_Hora_Fin FROM INSERTED I) 
   IF [DESCONOCIDOS4].FN_REG_TURNO_OK(@Hini,@Hfin)='SI'
   INSERT INTO DESCONOCIDOS4.TURNO (Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Precio_Base,Turno_Valor_Kilometro)
   SELECT I.Turno_Hora_Inicio,I.Turno_Hora_Fin,I.Turno_Descripcion,I.Turno_Precio_Base,I.Turno_Valor_Kilometro FROM INSERTED I
   ELSE 
   raiserror('Fuera de rango horario o se superpone', 16, 1)	
END
GO

--MODIFICAR TURNO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_TURNO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_TURNO
@Turno_id INT, --debe ingresar por la APP
@HIni INT,
@HFin INT,
@Descripcion VARCHAR(255),
@Precio_Base NUMERIC(18,2),
@Valor_Km NUMERIC(18,2),
@Habilitar BIT
AS 
BEGIN TRANSACTION 		
	UPDATE [DESCONOCIDOS4].TURNO SET  
	Turno_Hora_Inicio = @HIni,
	Turno_Hora_Fin=@HFin,
	Turno_Descripcion=@Descripcion,
	Turno_Precio_Base=@Precio_Base,
	Turno_Valor_Kilometro=@Valor_Km,
	Turno_Habilitado=@Habilitar
	WHERE Turno_Id= @Turno_id
COMMIT;
GO
-- ELIMINAR TURNO 
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_TURNO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_TURNO
@Turno_id INT
AS
BEGIN TRANSACTION 
  UPDATE [DESCONOCIDOS4].TURNO  SET Turno_Habilitado=0 WHERE Turno_Id=@Turno_id
COMMIT;
GO
-- Listar Turnos disponibles.
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_TURNOS_DISPONIBLES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_TURNOS_DISPONIBLES;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_TURNOS_DISPONIBLES
@Desc  VARCHAR(255) 
AS
BEGIN 
	SELECT Turno_Id,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Turno_Habilitado
	FROM [DESCONOCIDOS4].TURNO WHERE Turno_Descripcion LIKE ISNULL('%' + @Desc + '%', '%') AND Turno_Habilitado=1
END
GO

-- Listar Turnos 
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_TURNOS_COMPLETO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_TURNOS_COMPLETO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_TURNOS_COMPLETO
@Desc  VARCHAR(255) 
AS
BEGIN 
	SELECT Turno_Id,Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base,Turno_Habilitado
	FROM [DESCONOCIDOS4].TURNO WHERE Turno_Descripcion LIKE ISNULL('%' + @Desc + '%', '%') 
END
GO


-- Listar unidades disponibles por turno.
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_UNI_DISPONIBLE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_UNI_DISPONIBLE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_UNI_DISPONIBLE
 @TURNO INT 
AS
BEGIN 
	SELECT Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE WHERE Uni_Dis_Turno=@TURNO
END
GO


/*--------------------------------------------ABM AUTOMOVIL --------------------------------*/
-- ALTA DE AUTOMOVIL
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_AUTOMOVIL_UNI_DISPO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_AUTOMOVIL_UNI_DISPO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_AUTOMOVIL_UNI_DISPO
@Marca INT,
@Modelo INT,
@Patente VARCHAR(10),
@Turno INT,
@Chofer INT
AS 
BEGIN TRAN
 IF [DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO(@Chofer,@Turno)='NO' AND [DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO(@Chofer)= 'NO'
  BEGIN
  INSERT INTO  [DESCONOCIDOS4].AUTO (Auto_patente,Auto_Detalle,Auto_Marca_Modelo,Auto_Habilitado) 
  VALUES 
  (
  @Patente,
  [DESCONOCIDOS4].FN_DETALLE_AUTO(@Marca, @Modelo),
  [DESCONOCIDOS4].FN_MARCAMOD_X_MARCA_MODELO(@Marca, @Modelo),
  1
  )	
  INSERT INTO  [DESCONOCIDOS4].UNIDAD_DISPONIBLE (Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno)
  VALUES((SELECT MAX(Auto_Id) FROM [DESCONOCIDOS4].AUTO) ,@Chofer,@Turno)	
 END
 ELSE
 RAISERROR('Este chofer ya esta asignado en ese turno o a un auto',16,1)
COMMIT;
GO

--MODIFICACION AUTO
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_AUTO_DIS', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_AUTO_DIS;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_AUTO_DIS
@Marca INT,
@Modelo INT,
@Patente VARCHAR(10),
@Turno INT,
@Chofer INT,
@Hab BIT
AS 
BEGIN TRAN
 IF ([DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO(@Chofer,@Turno)='NO' AND   [DESCONOCIDOS4].FN_CHOFER_YA_DESIGNADO(@Chofer)= 'NO'
	 and [DESCONOCIDOS4].FN_ASIGNACION_X_CHOFER_TURNO([DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(@Patente), @Turno) ='NO')
  BEGIN
	  UPDATE [DESCONOCIDOS4].AUTO 
		SET  Auto_Patente=@Patente,Auto_Marca_Modelo=[DESCONOCIDOS4].FN_MARCAMOD_X_MARCA_MODELO(@Marca, @Modelo),
		Auto_Detalle=[DESCONOCIDOS4].FN_DETALLE_AUTO(@Marca, @Modelo),Auto_Habilitado=@Hab  
	  UPDATE  [DESCONOCIDOS4].UNIDAD_DISPONIBLE 
		SET 
			Uni_Dis_Auto=[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(@Patente),Uni_Dis_Chofer=@Chofer,Uni_Dis_Turno=@Turno
 END
 ELSE
 RAISERROR('Existen inconsistencias en los datos',16,1)
COMMIT;
GO

--BAJA AUTO 
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_AUTO_DIS', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_AUTO_DIS;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_AUTO_DIS
@Auto_ID INT
AS
BEGIN TRANSACTION 
  UPDATE [DESCONOCIDOS4].AUTO  SET Auto_Habilitado=0 WHERE Auto_Id=@Auto_ID
  DELETE [DESCONOCIDOS4].UNIDAD_DISPONIBLE WHERE Uni_Dis_Auto=@Auto_ID
COMMIT;
GO

--BUSCAR Y LISTAR AUTOS DISPONIBLES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_AUTOS_DISPONIBLES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_AUTOS_DISPONIBLES;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_AUTOS_DISPONIBLES
@Marca VARCHAR(255),
@Modelo VARCHAR(255),
@Patente VARCHAR(10),
@NomCh VARCHAR(255),
@ApeCh VARCHAR(255)
--@DniChofer INT
AS
BEGIN 
	SELECT DISTINCT 
	 A.Auto_Id,
	 A.Auto_Patente,
	 A.Auto_Detalle,
	 A.Auto_Marca_Modelo,
	 A.Auto_Habilitado
	FROM [DESCONOCIDOS4].AUTO A  LEFT JOIN [DESCONOCIDOS4].MARCA_MODELO  MM  ON A.Auto_Marca_Modelo=MM.Marca_Modelo_Id
	LEFT JOIN [DESCONOCIDOS4].MARCA MR ON MR.Marca_Id=MM.Marca_Modelo_Marca LEFT JOIN [DESCONOCIDOS4].MODELO MD ON MD.Modelo_Id=MM.Marca_Modelo_Modelo
	LEFT JOIN [DESCONOCIDOS4].UNIDAD_DISPONIBLE  U ON Uni_Dis_Auto=A.Auto_Id LEFT JOIN [DESCONOCIDOS4].CHOFER CH ON CH.Chofer_Id=U.Uni_Dis_Chofer
	LEFT JOIN [DESCONOCIDOS4].PERSONA P ON P.Persona_Id= CH.Chofer_Per_Id 
	WHERE MR.Marca_Nombre LIKE ISNULL('%' + @Marca + '%', '%') AND 
	MD.Modelo_Nombre LIKE ISNULL('%' + @Modelo + '%', '%') AND
	A.Auto_Patente  LIKE ISNULL('%' + @Patente + '%', '%') AND
	P.Persona_Nombre  LIKE ISNULL('%' + @NomCh + '%', '%')  AND
	P.Persona_Apellido  LIKE ISNULL('%' + @ApeCh + '%', '%')-- AND	
	--convert(varchar(50),P.Persona_Dni)  LIKE ISNULL('%' + convert(varchar(50),@DniChofer) + '%', '%')
	AND A.Auto_Habilitado=1 AND  A.Auto_Id IN (SELECT Uni_Dis_Auto FROM [DESCONOCIDOS4].UNIDAD_DISPONIBLE)
END
GO


--BUSCAR Y LISTAR AUTOS SIN IMPORTAR SU CONDICION
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI
@Marca VARCHAR(255),
@Modelo VARCHAR(255),
@Patente VARCHAR(10),
@NomCh VARCHAR(255),
@ApeCh VARCHAR(255)
--@DniChofer INT
AS
BEGIN 
	SELECT DISTINCT  A.Auto_Id,A.Auto_Patente,A.Auto_Detalle,A.Auto_Marca_Modelo,A.Auto_Habilitado
	FROM [DESCONOCIDOS4].AUTO A  LEFT JOIN [DESCONOCIDOS4].MARCA_MODELO  MM  ON A.Auto_Marca_Modelo=MM.Marca_Modelo_Id
	LEFT JOIN [DESCONOCIDOS4].MARCA MR ON MR.Marca_Id=MM.Marca_Modelo_Marca LEFT JOIN [DESCONOCIDOS4].MODELO MD ON MD.Modelo_Id=MM.Marca_Modelo_Modelo
	LEFT JOIN [DESCONOCIDOS4].UNIDAD_DISPONIBLE  U ON Uni_Dis_Auto=A.Auto_Id LEFT JOIN [DESCONOCIDOS4].CHOFER CH ON CH.Chofer_Id=U.Uni_Dis_Chofer
	LEFT JOIN [DESCONOCIDOS4].PERSONA P ON P.Persona_Id= CH.Chofer_Per_Id 
	WHERE MR.Marca_Nombre LIKE ISNULL('%' + @Marca + '%', '%') AND 
	MD.Modelo_Nombre LIKE ISNULL('%' + @Modelo + '%', '%') AND
	A.Auto_Patente  LIKE ISNULL('%' + @Patente + '%', '%') AND
	P.Persona_Nombre  LIKE ISNULL('%' + @NomCh + '%', '%')  AND
	P.Persona_Apellido  LIKE ISNULL('%' + @ApeCh + '%', '%') --AND	
	--convert(varchar(50),P.Persona_Dni)  LIKE ISNULL('%' + convert(varchar(50),@DniChofer) + '%', '%')
	
END
GO


--LISTAR MARCA MODELO 
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTA_MARCA_MODELO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTA_MARCA_MODELO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTA_MARCA_MODELO

AS
BEGIN TRANSACTION 
  SELECT MM.Marca_Modelo_Id, MR.Marca_Id,MR.Marca_Nombre,MD.Modelo_Id,MD.Modelo_Nombre FROM [DESCONOCIDOS4].MARCA_MODELO MM LEFT JOIN [DESCONOCIDOS4].MARCA MR ON MR.Marca_Id=MM.Marca_Modelo_Marca
  LEFT JOIN [DESCONOCIDOS4].MODELO MD ON MM.Marca_Modelo_Modelo=MD.Modelo_Id
COMMIT;
GO

--LISTAR MARCA  
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTA_MARCA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTA_MARCA;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTA_MARCA

AS
BEGIN TRANSACTION 
  SELECT  MR.Marca_Id,MR.Marca_Nombre FROM  [DESCONOCIDOS4].MARCA MR 
COMMIT;
GO

--LISTAR MODELO POR MARCA  
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTA_MODELO_X_MARCA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTA_MODELO_X_MARCA;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTA_MODELO_X_MARCA
@MarcaID INT
AS
BEGIN TRANSACTION 
  SELECT  MD.Modelo_Id,MD.Modelo_Nombre FROM [DESCONOCIDOS4].MARCA_MODELO MM LEFT JOIN [DESCONOCIDOS4].MARCA MR ON MR.Marca_Id=MM.Marca_Modelo_Marca
  LEFT JOIN [DESCONOCIDOS4].MODELO MD ON MM.Marca_Modelo_Modelo=MD.Modelo_Id WHERE MR.Marca_Id=@MarcaID
COMMIT;
GO

		--BUSCAR Y LISTAR AUTOS SIN IMPORTAR SU CONDICION PARA MODIFICACION - DIEGO
		IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI_PARA_MODIFICACION', N'P') IS NOT NULL
				DROP PROCEDURE  [DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI_PARA_MODIFICACION;
		GO
		CREATE PROCEDURE [DESCONOCIDOS4].PRC_LISTADO_AUTOS_SIN_CONDI_PARA_MODIFICACION
		@Marca VARCHAR(255),
		@Modelo VARCHAR(255),
		@Patente VARCHAR(10),
		@NomCh VARCHAR(255),
		@ApeCh VARCHAR(255)
		--@DniChofer INT
		AS
		BEGIN 
			SELECT DISTINCT  
	
	
			MR.Marca_Nombre,
			A.Auto_Id,
			A.Auto_Detalle,
			A.Auto_Patente,
			A.Auto_Habilitado,
			ch.Chofer_Id,
			P.Persona_Nombre,
			P.Persona_Apellido,
			MD.Modelo_Nombre,	
			TUR.Turno_Descripcion	

			FROM [DESCONOCIDOS4].AUTO A  
			LEFT JOIN [DESCONOCIDOS4].MARCA_MODELO  MM  ON A.Auto_Marca_Modelo=MM.Marca_Modelo_Id
			LEFT JOIN [DESCONOCIDOS4].MARCA MR ON MR.Marca_Id=MM.Marca_Modelo_Marca 
			LEFT JOIN [DESCONOCIDOS4].MODELO MD ON MD.Modelo_Id=MM.Marca_Modelo_Modelo
			LEFT JOIN [DESCONOCIDOS4].UNIDAD_DISPONIBLE  U ON Uni_Dis_Auto=A.Auto_Id 
			LEFT JOIN [DESCONOCIDOS4].CHOFER CH ON CH.Chofer_Id=U.Uni_Dis_Chofer
			LEFT JOIN [DESCONOCIDOS4].PERSONA P ON P.Persona_Id= CH.Chofer_Per_Id 
			LEFT JOIN [DESCONOCIDOS4].TURNO TUR ON TUR.Turno_Id = U.Uni_Dis_Turno
			WHERE CH.Chofer_Habilitado=1 AND TUR.Turno_Habilitado=1 AND
			MR.Marca_Nombre LIKE ISNULL('%' + @Marca + '%', '%') AND 
			MD.Modelo_Nombre LIKE ISNULL('%' + @Modelo + '%', '%') AND
			A.Auto_Patente  LIKE ISNULL('%' + @Patente + '%', '%') AND
			P.Persona_Nombre  LIKE ISNULL('%' + @NomCh + '%', '%')  AND
			P.Persona_Apellido  LIKE ISNULL('%' + @ApeCh + '%', '%') --AND	
			--convert(varchar(50),P.Persona_Dni)  LIKE ISNULL('%' + convert(varchar(50),@DniChofer) + '%', '%')
	
		END
		GO
/*------------------------- SP Y FUNCIONES PARA LOGIN --------------------------------------------------*/


IF OBJECT_ID('[DESCONOCIDOS4].PRC_OBTENER_ANCESTROS',N'P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].PRC_OBTENER_ANCESTROS;
GO
CREATE PROC [DESCONOCIDOS4].PRC_OBTENER_ANCESTROS
(
	@IdAncestro INT
)
as
begin
DECLARE @TablaMenu TABLE 
(
   Nombre nvarchar(50),
   Ascendente INT,
   Metodo VARCHAR(50),
   Descripcion VARCHAR(50)
)
Declare @NombreRama VARCHAR(50), @IdAscendente INT

DECLARE CU_Ramas CURSOR FOR
select Rama_Menu_Nombre, Rama_Menu_Ascendente from DESCONOCIDOS4.RAMA_MENU RM where RM.Rama_Menu_Id=@IdAncestro


Open CU_Ramas
FETCH NEXT FROM CU_Ramas
INTO @NombreRama, @IdAscendente
while @@FETCH_STATUS=0
begin
IF @IdAscendente IS NULL
BEGIN
	INSERT INTO @TablaMenu (Nombre, Ascendente, Metodo, Descripcion) VALUES (@NombreRama, NULL, NULL, NULL)
END
ELSE
BEGIN
EXEC PRC_OBTENER_ANCESTROS @IdAscendente
INSERT INTO @TablaMenu (Nombre, Ascendente, Metodo, Descripcion) VALUES (@NombreRama, @IdAscendente, NULL, NULL)
END


FETCH NEXT FROM CU_Ramas
INTO @NombreRama, @IdAscendente
END

CLOSE CU_Ramas
DEALLOCATE CU_Ramas
SELECT * FROM @TablaMenu
RETURN
END
GO



IF OBJECT_ID('[DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO;
GO

CREATE FUNCTION [DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO(@Usu_Id INT)
RETURNS INT
AS
BEGIN
RETURN (SELECT Usu_cantIntentosLoginFallidos FROM [DESCONOCIDOS4].USUARIO WHERE Usu_Id=@Usu_Id)
END
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_ACTUALIZAR_INTENTOS_FALLIDOS', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_ACTUALIZAR_INTENTOS_FALLIDOS;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_ACTUALIZAR_INTENTOS_FALLIDOS ON [DESCONOCIDOS4].USUARIO
AFTER UPDATE
AS
BEGIN
TRANSACTION
	DECLARE @Usu_Id INT
	SELECT @Usu_Id = (SELECT I.Usu_Id FROM INSERTED I)
	IF ([DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO(@Usu_Id)) = 3
	BEGIN
		UPDATE [DESCONOCIDOS4].USUARIO SET Usu_cantIntentosLoginFallidos = 0, Usu_Habilitado = 0 WHERE Usu_Id=@Usu_Id
	END
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_VALIDAR_USUARIO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_VALIDAR_USUARIO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_VALIDAR_USUARIO
      @Usuario NVARCHAR(255),
      @Clave NVARCHAR(255)
AS
BEGIN
      SET NOCOUNT ON;
	  DECLARE @Habilitado BIT
	  DECLARE @No_Habilitado BIT
      DECLARE @Usu_Id INT
	  DECLARE @Usuario_No_Existe INT
      DECLARE @Usuario_No_Habilitado INT
	  DECLARE @Usuario_Clave_Incorrecta INT
	  DECLARE @NombreUsuario VARCHAR(50)
	  DECLARE @ApellidoUsuario VARCHAR(50)
	  DECLARE @PersonaId INT
	  SELECT @Usuario_No_Habilitado = -2
	  SELECT @Usuario_No_Existe = -1
	  SELECT @Usuario_Clave_Incorrecta = -3
	  SELECT @Habilitado = 1
	  SELECT @No_Habilitado = 0


      SELECT @Usu_Id = Usu_Id
		FROM [DESCONOCIDOS4].Usuario WHERE Usu_Nombre_Usuario = @Usuario

	  SELECT @NombreUsuario = Persona_Nombre, @ApellidoUsuario = Persona_Apellido
      FROM [DESCONOCIDOS4].Usuario U JOIN [DESCONOCIDOS4].PERSONA P ON U.Usu_Per_Id = P.Persona_Id WHERE U.Usu_Id = @Usu_Id 

      IF @Usu_Id IS NOT NULL
	  -- Usuario Existe
      BEGIN
			IF EXISTS(SELECT Usu_Id FROM [DESCONOCIDOS4].Usuario WHERE Usu_Nombre_Usuario = @Usuario AND Usu_Password = @Clave)
			-- Usuario Existe y Clave Correcta
            BEGIN
                IF EXISTS(SELECT Usu_Id FROM [DESCONOCIDOS4].Usuario WHERE Usu_Id = @Usu_Id AND Usu_Habilitado=@Habilitado)
                BEGIN
				-- Usuario Existe, Clave Correcta y Habilitado
					IF ([DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO(@Usu_Id)) != 0
					BEGIN
						-- Actualiza Intentos Fallidos de ingreso, en caso que sea necesario
						UPDATE [DESCONOCIDOS4].USUARIO SET Usu_cantIntentosLoginFallidos=0 WHERE Usu_Id=@Usu_Id
					END
					SELECT @Usu_Id [UserId], Rol_Id, Rol_Nombre,@NombreUsuario Nombre,@ApellidoUsuario Apellido, isnull(@PersonaId,0) idPersona FROM [DESCONOCIDOS4].USUARIO_ROL left join [DESCONOCIDOS4].ROL on UsuRol_Rol_Id=Rol_Id
                              WHERE Rol_Habilitado=@Habilitado and UsuRol_Usu_Id=@Usu_Id
				END
				ELSE
				BEGIN
					-- Usuario Existe, Clave Correcta y No Habilitado
					SELECT @Usuario_No_Habilitado [UserId], -1 Rol_Id, '' Rol_Nombre, NULL Nombre, NULL Apellido,0 idPersona
				END
            END
            ELSE
            BEGIN
				-- Usuario Existe y Clave Incorrecta
				-- Actualiza Intentos Fallidos de ingreso
				UPDATE [DESCONOCIDOS4].USUARIO SET Usu_cantIntentosLoginFallidos=
													([DESCONOCIDOS4].FN_OBTENER_CANTIDAD_INTENTOS_FALLIDOS_DE_INGRESO(@Usu_Id)) + 1
												WHERE Usu_Id=@Usu_Id
				SELECT @Usuario_Clave_Incorrecta [UserId], -1 Rol_Id, '' Rol_Nombre, NULL Nombre, NULL Apellido,0 idPersona
            END
      END
      ELSE
      BEGIN
		-- Usuario NO EXISTE
        SELECT @Usuario_No_Existe [UserId], -1 Rol_Id, '' Rol_Nombre, NULL Nombre, NULL Apellido,0 idPersona
      END
END
go
IF OBJECT_ID(N'[DESCONOCIDOS4].FN_OBTENER_ANCESTROS', N'TF') IS NOT NULL
		DROP FUNCTION  [DESCONOCIDOS4].FN_OBTENER_ANCESTROS;
GO
Create FUNCTION [DESCONOCIDOS4].FN_OBTENER_ANCESTROS
(
	@IdAncestro INT
)
RETURNS @TablaMenu TABLE 
(
   Id INT NOT NULL IDENTITY(1,1),
   Nombre nvarchar(50),
   Ascendente INT,
   Metodo VARCHAR(50),
   Descripcion VARCHAR(50)
)
as
begin
Declare @NombreRama VARCHAR(50), @IdAscendente INT
DECLARE CU_Ramas CURSOR FOR
select Rama_Menu_Nombre, Rama_Menu_Ascendente from DESCONOCIDOS4.RAMA_MENU RM where RM.Rama_Menu_Id=@IdAncestro

Open CU_Ramas
FETCH NEXT FROM CU_Ramas
INTO @NombreRama, @IdAscendente
while @@FETCH_STATUS=0
begin
IF @IdAscendente IS NULL
BEGIN
	INSERT INTO @TablaMenu (Nombre, Ascendente, Metodo, Descripcion) VALUES (@NombreRama, NULL, NULL, NULL)
END
ELSE
BEGIN
INSERT INTO @TablaMenu SELECT Nombre, Ascendente, Metodo, Descripcion FROM [DESCONOCIDOS4].FN_OBTENER_ANCESTROS(@IdAscendente)
INSERT INTO @TablaMenu (Nombre, Ascendente, Metodo, Descripcion) VALUES (@NombreRama, @IdAscendente, NULL, NULL)
END

FETCH NEXT FROM CU_Ramas
INTO @NombreRama, @IdAscendente
END

CLOSE CU_Ramas
DEALLOCATE CU_Ramas
RETURN
END
GO
IF OBJECT_ID(N'[DESCONOCIDOS4].FN_OBTENER_MENU',N'TF') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_OBTENER_MENU;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_OBTENER_MENU
(
	@IdRol INT
)
returns @TablaMenu TABLE 
(
   Id INT NOT NULL IDENTITY(1,1),
   Nombre nvarchar(50),
   Ascendente INT,
   Metodo VARCHAR(50),
   Descripcion VARCHAR(50)
)
as
begin
Declare @NombreRama VARCHAR(50), @IdAscendente INT, @Metodo VARCHAR(50), @Descripcion VARCHAR(50)

DECLARE CU_Hojas CURSOR FOR
(select Hoja_Menu_Nombre, Hoja_Menu_Ascendente, Func_Metodo, Func_Descripcion from
(select Func_Id, Func_Descripcion, Func_Metodo from (select * from DESCONOCIDOS4.FUNCIONALIDADXROL where FuncRol_Rol_Id=@IdRol) FUNROL join DESCONOCIDOS4.FUNCIONALIDAD 
	on FUNROL.FunRol_Func_Id=Func_Id) FUN join DESCONOCIDOS4.HOJA_MENU on FUN.Func_Id = HOJA_MENU.Hoja_Menu_Funcion) 

Open CU_Hojas
FETCH NEXT FROM CU_Hojas
INTO @NombreRama, @IdAscendente, @Metodo, @Descripcion
while @@FETCH_STATUS=0
begin
IF @IdAscendente IS NOT NULL
BEGIN
	INSERT INTO @TablaMenu SELECT Nombre, Ascendente, Metodo, Descripcion FROM [DESCONOCIDOS4].FN_OBTENER_ANCESTROS(@IdAscendente)
END
INSERT INTO @TablaMenu (Nombre, Ascendente, Metodo, Descripcion) VALUES (@NombreRama, @IdAscendente, @Metodo, @Descripcion)

FETCH NEXT FROM CU_Hojas
INTO @NombreRama, @IdAscendente, @Metodo, @Descripcion
END

CLOSE CU_Hojas
DEALLOCATE CU_Hojas
RETURN
END
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_OBTENER_MENU_X_ROL', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_OBTENER_MENU_X_ROL;
GO
CREATE PROC [DESCONOCIDOS4].PRC_OBTENER_MENU_X_ROL
(
	@IdRol INT
)
AS
BEGIN
DECLARE @TablaMenu TABLE 
(
   Id INT NOT NULL IDENTITY(1,1),
   Nombre nvarchar(50),
   Ascendente INT,
   Metodo VARCHAR(50),
   Descripcion VARCHAR(50)
)
INSERT INTO @TablaMenu SELECT Nombre, Ascendente, Metodo, Descripcion FROM [DESCONOCIDOS4].FN_OBTENER_MENU(@IdRol)
DELETE FROM @TablaMenu WHERE ID IN (SELECT Id FROM @TablaMenu TM WHERE TM.Nombre IN (SELECT NOMBRE FROM @TablaMenu WHERE Ascendente IS NULL) AND TM.Id>(SELECT TOP 1 ID FROM @TablaMenu WHERE Ascendente IS NULL AND NOMBRE=TM.Nombre))
DELETE FROM @TablaMenu WHERE ID IN (SELECT Id FROM @TablaMenu TM WHERE TM.Nombre IN (SELECT NOMBRE FROM @TablaMenu WHERE Ascendente IS NOT NULL AND METODO IS NULL) AND TM.Id>(SELECT TOP 1 ID FROM @TablaMenu WHERE Ascendente IS NOT NULL AND METODO IS NULL AND NOMBRE=TM.Nombre))
SELECT Nombre, ISNUMERIC(Ascendente) Ascendente, Metodo, Descripcion FROM @TablaMenu
RETURNS
END
GO


/*------------------------------------FACTURACION --------------------------------------------------------*/

--FUNCION VIAJES FACTURADOS



IF OBJECT_ID(N'[DESCONOCIDOS4].FN_VIAJES_FACTURADOS',N'TF')IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_VIAJES_FACTURADOS;
GO


CREATE FUNCTION [DESCONOCIDOS4].FN_VIAJES_FACTURADOS (@CLIENTE INT)
RETURNS 
@RESUL TABLE (
   Id       INT
   ) 
AS
BEGIN
	INSERT INTO @RESUL	
	SELECT 
		
		I.Item_Fac_Id_Viaje															AS IDE_VIAJE
	FROM DESCONOCIDOS4.ITEM_FACTURA I 
	LEFT JOIN DESCONOCIDOS4.CABECERO_FACTURA CABF ON CABF.Cab_Fac_Nro = I.Item_Fac_Nro_Fac
	WHERE CABF.Cab_Fac_Cliente = @CLIENTE
	RETURN 
END
GO

--MUESTRA LOS PRIMEROS 4 PUNTOS PEDIDOS EN FUNCIONALIDAD FACTURAR A CLIENTE
IF OBJECT_ID(N'[DESCONOCIDOS4].PRC_FACTURAR_A_CLIENTE',N'P')IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].PRC_FACTURAR_A_CLIENTE;
GO

CREATE PROCEDURE [DESCONOCIDOS4].PRC_FACTURAR_A_CLIENTE(@CLIENTE INT , @FECHA_HASTA DATE)
AS BEGIN
IF ((SELECT Cliente_Habilitado FROM DESCONOCIDOS4.CLIENTE WHERE Cliente_Id = @CLIENTE) = 1)
	BEGIN
		SELECT 
			CONVERT(DATE,MIN(Viaje_Fecha_Hora_Inicio)) AS FECHA_INICIO_FACTURA,
			@FECHA_HASTA							   AS FECHA_FIN_FACRURA,
			@CLIENTE								   AS CLIENTE,
			SUM(Viaje_Importe)						   AS IMPORTE_TOTAL

		FROM DESCONOCIDOS4.VIAJE 
		WHERE  Viaje_Cliente = @CLIENTE  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= CONVERT(DATE,@FECHA_HASTA) AND Viaje_Nro NOT IN (SELECT * FROM DESCONOCIDOS4.FN_VIAJES_FACTURADOS(@CLIENTE))
	END
	

END
GO
--MUESTRA EL ULTIMO PUNTO DE LA FUNCIONALIDAD (VIAJES) FACTURAR A CLIENTE
IF OBJECT_ID(N'[DESCONOCIDOS4].FN_VIAJES_A_FACTURAR',N'TF')IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_VIAJES_A_FACTURAR;
GO

CREATE FUNCTION [DESCONOCIDOS4].FN_VIAJES_A_FACTURAR(@CLIENTE INT , @FECHA_HASTA DATE)
RETURNS 
@RESUL TABLE (
   ITEM					INT,
   ID_VIAJE				INT,
   CLIENTE				INT,
   CANT_KM				NUMERIC(18,2),
   IMPORTE_TOTAL		NUMERIC (18,2),
   FECHA_HORA_INICIO	DATETIME,
   FECHA_HORA_FIN		DATETIME      
   ) 
AS BEGIN
INSERT INTO @RESUL	
SELECT
	
	ROW_NUMBER() OVER (PARTITION BY Viaje_Cliente ORDER BY Viaje_Cliente) AS ITEM,
	Viaje_Nro				AS  ID_VIAJE,
	Viaje_Cliente			AS CLIENTE,
	Viaje_Cantidad_Km		AS CANTIDAD_KM,
	Viaje_Importe			AS IMPORTE_TOTAL,
	Viaje_Fecha_Hora_Inicio AS FECHA_HORA_INICIO,
	Viaje_Fecha_Hora_Fin	AS FECHA_HORA_FIN
	
 FROM DESCONOCIDOS4.VIAJE
 WHERE  Viaje_Cliente = @CLIENTE  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= CONVERT(DATE,@FECHA_HASTA) AND Viaje_Nro NOT IN (SELECT  * FROM DESCONOCIDOS4.FN_VIAJES_FACTURADOS(@CLIENTE))
 RETURN
END
GO





--PROCEDIMIENTO QUE INSERTA LA FACTURA Y SUS RESPECTIVOS ITEMS LUEGO QUE SE ACEPTAN LOS DATOS A FACTURAR

IF OBJECT_ID(N'[DESCONOCIDOS4].PRC_INSERTAR_FACTURA',N'P')IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].PRC_INSERTAR_FACTURA;
GO

CREATE PROCEDURE [DESCONOCIDOS4].PRC_INSERTAR_FACTURA(@CLIENTE INT , @FECHA_HASTA DATE)
AS 

BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_FACTURA (Cab_Fac_Nro,Cab_Fac_Fecha,Cab_Fac_Cliente,Cab_Fac_Fecha_Inicio,Cab_Fac_Fecha_Fin,Cab_Fac_Total_Fac) 
	   SELECT 
		   (SELECT MAX(Cab_Fac_Nro) FROM DESCONOCIDOS4.CABECERO_FACTURA)+1				AS Cab_Fac_Nro,
		   @FECHA_HASTA																  AS Cab_Fac_Fecha,
		   @CLIENTE																	  AS Cab_Fac_Cliente,
		   CONVERT(DATE,MIN(Viaje_Fecha_Hora_Inicio))								  AS Cab_Fac_Fecha_Inicio,
		   @FECHA_HASTA																  AS Cab_Fac_Fecha_Fin,
			SUM(Viaje_Importe)													      AS Cab_Fac_Total_Fac
		FROM DESCONOCIDOS4.VIAJE 
		WHERE  Viaje_Cliente = @CLIENTE  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= CONVERT(DATE,@FECHA_HASTA) AND Viaje_Nro NOT IN (SELECT  * FROM DESCONOCIDOS4.FN_VIAJES_FACTURADOS(@CLIENTE))

COMMIT
	
GO


--INSERTO ITEMS
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_INSERTAR_ITEMS', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_INSERTAR_ITEMS;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_INSERTAR_ITEMS ON [DESCONOCIDOS4].CABECERO_FACTURA
FOR INSERT
AS
BEGIN TRANSACTION	
	DECLARE @CLIE INT
	DECLARE @FECHA DATETIME
	SET @CLIE = (SELECT I2.Cab_Fac_Cliente FROM INSERTED I2)
	SET @FECHA= (SELECT I2.Cab_Fac_Fecha FROM INSERTED I2)
	INSERT INTO [DESCONOCIDOS4].ITEM_FACTURA(Item_Fac_Nro_Fac,Item_Fac_Item,Item_Fac_Id_Viaje)
	SELECT 
	(SELECT I.Cab_Fac_Nro FROM INSERTED I) AS Item_Fac_Nro_Fac,
	ITEM								   AS Item_Fac_Item,
	ID_VIAJE							   AS Item_Fac_Id_Viaje
	FROM [DESCONOCIDOS4].FN_VIAJES_A_FACTURAR(@CLIE,@FECHA )
COMMIT
GO


/*------------------------------------FIN FACTURACION --------------------------------------------------------*/

/*------------------------------------RENDICIONES --------------------------------------------------------*/
--EL PORCENTAJE LO DEFINI A RENDIR LO PUSE EN 0.3 SE PUEDE CAMBIAR EN DOS LUGARES,
--EN LA FUNCION QUE CALCULA EL MONTO TOTAL A FACTURAR Y EN EL DETALLE DE LA RENDICION, DONDE MUESTRA EL MONTO DEL VIEJE



--VIAJES RENDIDOS

IF OBJECT_ID(N'[DESCONOCIDOS4].FN_VIAJES_RENDIDOS',N'TF')IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_VIAJES_RENDIDOS;
GO



CREATE FUNCTION [DESCONOCIDOS4].FN_VIAJES_RENDIDOS (@CHOFER INT, @TURNO INT)
RETURNS
@RESUL TABLE (
   Id       INT
   ) 
AS
BEGIN
	INSERT INTO @RESUL	
	SELECT 		
		I.Item_Rend_Viaje		AS IDE_VIAJE
	FROM DESCONOCIDOS4.ITEM_RENDICION I 
	LEFT JOIN DESCONOCIDOS4.CABECERO_RENDICION CABR ON CABR.Cab_Rend_Nro = I.Item_Rend_NroRend
	WHERE CABR.Cab_Rend_Chofer = @CHOFER AND @TURNO = CABR.Cab_Rend_Turno
	RETURN
END
GO


--MONTO A RENDIR
IF OBJECT_ID(N'[DESCONOCIDOS4].FN_MONTO_A_RENDIR',N'FN')IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_MONTO_A_RENDIR;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_MONTO_A_RENDIR (@CHOFER INT, @TURNO INT , @FECHA_RENDICION DATE)
RETURNS NUMERIC(18,2)
AS
BEGIN
DECLARE @MONTO_A_RENDIR NUMERIC(18,2)
SET @MONTO_A_RENDIR = 
(
SELECT SUM(Viaje_Importe*0.3) FROM DESCONOCIDOS4.VIAJE
WHERE Viaje_Chofer = @CHOFER AND Viaje_Turno = @TURNO AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) = @FECHA_RENDICION AND Viaje_Nro NOT IN (SELECT * FROM [DESCONOCIDOS4].FN_VIAJES_RENDIDOS (@CHOFER, @TURNO))

)
RETURN @MONTO_A_RENDIR 
END
GO

--MUESTRA LOS PUNTOS PEDIDOS EN FUNCIONALIDAD RENDICION
IF OBJECT_ID(N'[DESCONOCIDOS4].PRC_RENDICION',N'P')IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].PRC_RENDICION;
GO

CREATE PROCEDURE [DESCONOCIDOS4].PRC_RENDICION(@CHOFER INT , @FECHA_RENDICION DATE , @TURNO INT)
AS BEGIN

--validacion habilitado
DECLARE @HABILITADO INT
SET @HABILITADO = (SELECT Chofer_Habilitado FROM DESCONOCIDOS4.CHOFER WHERE Chofer_Habilitado = @CHOFER)

DECLARE @TURNOS_CHOFER TABLE( TURNOS int )
INSERT INTO @TURNOS_CHOFER
SELECT Uni_Dis_Turno FROM DESCONOCIDOS4.UNIDAD_DISPONIBLE WHERE Uni_Dis_Chofer =@CHOFER


IF (@HABILITADO = 1 AND @TURNO IN (SELECT * FROM @TURNOS_CHOFER))--fin validacion
	BEGIN
		SELECT 
			@FECHA_RENDICION	AS FECHA_RENDICION,
			@CHOFER				AS CHOFER,
			@TURNO				AS TURNO,
			DESCONOCIDOS4.FN_MONTO_A_RENDIR(@CHOFER , @TURNO, @FECHA_RENDICION )	AS IMPORTE_A_RENDIR

		FROM DESCONOCIDOS4.VIAJE 
		WHERE  Viaje_Chofer = @CHOFER  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= @FECHA_RENDICION AND Viaje_Nro NOT IN (SELECT * FROM [DESCONOCIDOS4].FN_VIAJES_RENDIDOS (@CHOFER, @TURNO))
	END
	

END
GO



--MUESTRA EL DETALLE DE LOS VIAJES A RENDIR
IF OBJECT_ID(N'[DESCONOCIDOS4].FN_VIAJES_A_RENDIR',N'TF')IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_VIAJES_A_RENDIR;
GO


CREATE FUNCTION [DESCONOCIDOS4].FN_VIAJES_A_RENDIR(@CHOFER INT , @FECHA_RENDICION DATE , @TURNO INT)
RETURNS 
@RESUL TABLE (
   ITEM					INT,
   ID_VIAJE				INT,
   CLIENTE				INT,
   CANTIDAD_KM			NUMERIC(18,2),
   IMPORTE_TOTAL		NUMERIC(18,2),
   FECHA_HORA_INICIO	DATETIME,
   FECHA_HORA_FIN		DATETIME
   ) 
AS BEGIN
	INSERT INTO @RESUL

	SELECT
	ROW_NUMBER() OVER (PARTITION BY Viaje_Cliente ORDER BY Viaje_Cliente) AS ITEM,
	Viaje_Nro				AS  ID_VIAJE,
	Viaje_Cliente			AS CLIENTE,
	Viaje_Cantidad_Km		AS CANTIDAD_KM,
	Viaje_Importe*0.3		AS IMPORTE_TOTAL,
	Viaje_Fecha_Hora_Inicio AS FECHA_HORA_INICIO,
	Viaje_Fecha_Hora_Fin	AS FECHA_HORA_FIN
	
 FROM DESCONOCIDOS4.VIAJE
 WHERE  Viaje_Chofer = @CHOFER  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= @FECHA_RENDICION AND Viaje_Nro NOT IN (SELECT * FROM [DESCONOCIDOS4].FN_VIAJES_RENDIDOS (@CHOFER, @TURNO))
 RETURN
END
GO


--PROCEDIMIENTO QUE INSERTA LA RENDICION Y SUS RESPECTIVOS ITEMS LUEGO QUE SE ACEPTAN LOS DATOS A RENDIR

IF OBJECT_ID(N'[DESCONOCIDOS4].PRC_INSERTAR_RENDICION',N'P')IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].PRC_INSERTAR_RENDICION;
GO

CREATE PROCEDURE [DESCONOCIDOS4].PRC_INSERTAR_RENDICION(@CHOFER INT , @FECHA_RENDICION DATE, @TURNO INT)
AS 

BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_RENDICION(Cab_Rend_Nro,Cab_Rend_Turno,Cab_Rend_Chofer,Cab_Rend_Fecha,Cab_Rend_Importe) 
	   SELECT 
		   (SELECT MAX(Cab_Rend_Nro) FROM DESCONOCIDOS4.CABECERO_RENDICION)+1				AS Cab_Rend_Nro,
		   @TURNO																		AS Cab_Rend_Turno,
		   @CHOFER																	    AS Cab_Rend_Chofer,
		   @FECHA_RENDICION																AS Cab_Rend_Fecha,
		   DESCONOCIDOS4.FN_MONTO_A_RENDIR(@CHOFER , @TURNO, @FECHA_RENDICION )			AS Cab_Rend_Importe
		FROM DESCONOCIDOS4.VIAJE 
		WHERE  Viaje_Chofer = @CHOFER  AND CONVERT(DATE,Viaje_Fecha_Hora_Fin) <= @FECHA_RENDICION AND Viaje_Nro NOT IN (SELECT * FROM [DESCONOCIDOS4].FN_VIAJES_RENDIDOS (@CHOFER, @TURNO))

COMMIT
	
GO


--INSERTO ITEMS DE LA RENDICION
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_INSERTAR_ITEMS_REND', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_INSERTAR_ITEMS_REND;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_INSERTAR_ITEMS_REND ON [DESCONOCIDOS4].CABECERO_RENDICION
FOR INSERT
AS
BEGIN TRANSACTION	
DECLARE @FECHA_RENDICION DATE
SET @FECHA_RENDICION = (SELECT I1.Cab_Rend_Fecha FROM INSERTED I1)
DECLARE @CHOFER INT
SET @CHOFER = (SELECT I2.Cab_Rend_Chofer FROM INSERTED I2)
DECLARE @TURNO  INT
SET @TURNO = (SELECT I3.Cab_Rend_Turno FROM INSERTED I3)



	INSERT INTO [DESCONOCIDOS4].ITEM_RENDICION(Item_Rend_NroRend,Item_Rend_Pos,Item_Rend_Viaje) 
	SELECT 
	(SELECT I4.Cab_Rend_Nro FROM INSERTED I4) AS Item_Rend_NroRend,
	ITEM									  AS Item_Rend_Pos,
	ID_VIAJE							      AS Item_Rend_Viaje
	FROM [DESCONOCIDOS4].FN_VIAJES_A_RENDIR(@CHOFER,@FECHA_RENDICION ,@TURNO)
COMMIT
GO


/*------------------------------------FIN RENDICIONES --------------------------------------------------------*/





/*--------------------------------------LISTADOS ESTADISTICOS---------------------------------------*/

 /*TOP 5 CHOFERES CON MAYOR RECAUDACION*/
IF OBJECT_ID(N'[DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION',N'P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT
	TOP 5
		CH.Chofer_Id									AS CHOFER_ID,
		[DESCONOCIDOS4].DAME_DNI_CHOFER(CH.Chofer_Id)	AS CHOFER_DNI,
		SUM(CF.Cab_Fac_Total_Fac)						AS TOTAL_FACTURADO
	FROM DESCONOCIDOS4.CHOFER CH
	LEFT JOIN DESCONOCIDOS4.VIAJE VI ON VI.Viaje_Chofer = CH.Chofer_Id
	LEFT JOIN DESCONOCIDOS4.ITEM_FACTURA IT ON IT.Item_Fac_Id_Viaje = VI.Viaje_Nro
	LEFT JOIN DESCONOCIDOS4.CABECERO_FACTURA CF ON CF.Cab_Fac_Nro = IT.Item_Fac_Nro_Fac
	WHERE CH.Chofer_Habilitado = 1 AND CF.Cab_Fac_Nro IS NOT NULL AND DATEPART(QUARTER,CF.Cab_Fac_Fecha)= @QUARTER AND YEAR(CF.Cab_Fac_Fecha) = @AÑO
	GROUP BY CH.Chofer_Id,[DESCONOCIDOS4].DAME_DNI_CHOFER(CH.Chofer_Id)
	ORDER BY TOTAL_FACTURADO DESC
END
GO
/* FIN TOP 5 CHOFERES CON MAYOR RECAUDACION*/


/* TOP 5 Choferes con el viaje más largo realizado*/
IF OBJECT_ID(N'[DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO',N'P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO
@QUARTER INT,
@AÑO INT
AS
	BEGIN
		SELECT
		TOP 5
			DESCONOCIDOS4.VIAJE.Viaje_Chofer			AS CHOFER,
			DESCONOCIDOS4.VIAJE.Viaje_Nro				AS NUM_VIAJE,
			DESCONOCIDOS4.VIAJE.Viaje_Cantidad_Km		AS KM_RECORRIDOS
		FROM DESCONOCIDOS4.VIAJE
		WHERE DATEPART(QUARTER,DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @QUARTER AND YEAR(DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @AÑO
		ORDER BY DESCONOCIDOS4.VIAJE.Viaje_Cantidad_Km DESC
	END
GO
/* FIN TOP 5 Choferes con el viaje más largo realizado*/


/*TOP 5 CLIENTES CON MAYOR CONSUMO*/

IF OBJECT_ID (N'[DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO',N'P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT
	TOP 5
		DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Cliente			AS CLIENTE,
		SUM(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Total_Fac)	AS TOTAL_FACTURADO
	FROM DESCONOCIDOS4.CABECERO_FACTURA
	WHERE DATEPART(QUARTER,DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Fecha) = @QUARTER AND YEAR(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Fecha) = @AÑO
	GROUP BY DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Cliente
	ORDER BY SUM(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Total_Fac) DESC
END
GO
/*FIN TOP 5 CLIENTES CON MAYOR CONSUMO*/


/*TOP 5 Cliente que utilizo más veces el mismo automóvil en los viajes que ha realizado*/
--CADA REGISTRO ES UN VIAJE DISTINTO
IF OBJECT_ID(N'[DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO',N'P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT 
	TOP 5
		DESCONOCIDOS4.VIAJE.Viaje_Cliente		AS CLIENTE,
		DESCONOCIDOS4.VIAJE.Viaje_Automovil		AS AUTOMOVIL,
		COUNT(*)								AS CANT_VIAJES
	FROM DESCONOCIDOS4.VIAJE
	WHERE DATEPART(QUARTER,DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @QUARTER AND YEAR(DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @AÑO
	GROUP BY DESCONOCIDOS4.VIAJE.Viaje_Cliente,DESCONOCIDOS4.VIAJE.Viaje_Automovil
	ORDER BY  CANT_VIAJES DESC
END
GO


-- TIEMPO 00:01:44


