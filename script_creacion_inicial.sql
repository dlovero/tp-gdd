USE [GD1C2017]
IF NOT EXISTS (
SELECT schema_name
FROM information_schema.SCHEMATA
WHERE schema_name = 'DESCONOCIDOS4' )
BEGIN
EXEC sp_executesql N'CREATE SCHEMA DESCONOCIDOS4'
END
GO

/*---------Limpieza de Tablas-------------*/
IF OBJECT_ID('DESCONOCIDOS4.ITEM_RENDICION') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ITEM_RENDICION ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.ITEM_FACTURA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ITEM_FACTURA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CABECERO_RENDICION') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CABECERO_RENDICION ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CABECERO_FACTURA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CABECERO_FACTURA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.VIAJE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.VIAJE ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.VIAJE_REP') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.VIAJE_REP ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.UNIDAD_DISPONIBLE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.UNIDAD_DISPONIBLE ;
END
GO
IF OBJECT_ID('DESCONOCIDOS4.USUARIO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.USUARIO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CHOFER') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CHOFER ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.CLIENTE') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.CLIENTE ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.PERSONA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.PERSONA ;
END;
GO

IF OBJECT_ID('DESCONOCIDOS4.TURNO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.TURNO ;
END
GO
IF OBJECT_ID('DESCONOCIDOS4.AUTO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.AUTO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MARCA_MODELO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MARCA_MODELO ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MARCA') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MARCA ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.MODELO') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.MODELO ;
END;
GO


IF OBJECT_ID('DESCONOCIDOS4.USUARIO_ROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.USUARIO_ROL ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.FUNCIONALIDADXROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.FUNCIONALIDADXROL ;
END;
GO
IF OBJECT_ID('DESCONOCIDOS4.ROL') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.ROL ;
END;
GO

IF OBJECT_ID('DESCONOCIDOS4.FUNCIONALIDAD') IS NOT NULL
BEGIN
DROP TABLE DESCONOCIDOS4.FUNCIONALIDAD ;
END;
GO

/*---------Definiciones de Tabla-------------*/
CREATE TABLE [DESCONOCIDOS4].PERSONA(
Persona_Id INT IDENTITY(1,1) NOT NULL,
Persona_Dni NUMERIC(18,0) NOT NULL,
Persona_Nombre VARCHAR(255)NOT NULL,
Persona_Apellido VARCHAR(255) NOT NULL,
Persona_Direccion VARCHAR(255) NOT NULL,
Persona_Piso SMALLINT NOT NULL,
Persona_Dartamento  VARCHAR(255) NOT NULL,
Persona_Localidad  VARCHAR(255) NOT NULL,
Persona_Cod_Postal VARCHAR(255) NOT NULL,
Persona_Telefono NUMERIC(18,0) NOT NULL  UNIQUE,
Persona_Mail VARCHAR(255) NOT NULL,
Persona_Fecha_Nac DATETIME NOT NULL,
PRIMARY KEY (Persona_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].USUARIO(
Usu_Id INT IDENTITY(1,1) NOT NULL,
Usu_Per_Id INT ,
Usu_Nombre_Usuario VARCHAR (255) NOT NULL,
Usu_Password VARCHAR(255) NOT NULL,
Usu_cantIntentosLoginFallidos SMALLINT DEFAULT 0,
Usu_Habilitado BIT DEFAULT 1,
PRIMARY KEY (Usu_Id)
);
GO

CREATE TABLE [DESCONOCIDOS4].CHOFER(
Chofer_Id INT NOT NULL IDENTITY(1,1),
Chofer_Per_Id INT REFERENCES [DESCONOCIDOS4].PERSONA NOT NULL,
Chofer_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Chofer_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].CLIENTE(
Cliente_Id INT NOT NULL IDENTITY(1,1),
Cliente_Per_ID INT REFERENCES [DESCONOCIDOS4].PERSONA NOT NULL, 
Cliente_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Cliente_Id)
);
GO

CREATE TABLE [DESCONOCIDOS4].TURNO(
Turno_Id INT NOT NULL IDENTITY(1,1), 
Turno_Hora_Inicio NUMERIC(18,0),
Turno_Hora_Fin NUMERIC(18,0),
Turno_Descripcion VARCHAR(255),
Turno_Valor_Kilometro NUMERIC(18,2),
Turno_Precio_Base NUMERIC(18,2),
PRIMARY KEY(Turno_Id));
GO

CREATE TABLE [DESCONOCIDOS4].MODELO (
Modelo_Id INT NOT NULL IDENTITY(1,1),
Modelo_Nombre VARCHAR(255),
Modelo_Rodado VARCHAR(10),
PRIMARY KEY(Modelo_id)
);
GO
CREATE TABLE [DESCONOCIDOS4].MARCA (
Marca_Id INT NOT NULL IDENTITY(1,1),
Marca_Nombre  VARCHAR(255),
PRIMARY KEY(Marca_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].MARCA_MODELO (
TMarca_Modelo_id INT NOT NULL IDENTITY(1,1),
TAuto_Marca INT REFERENCES [DESCONOCIDOS4].MARCA NOT NULL,
TAuto_Modelo INT REFERENCES [DESCONOCIDOS4].MODELO NOT NULL,
PRIMARY KEY(TMarca_Modelo_id)
);
GO
CREATE TABLE [DESCONOCIDOS4].AUTO(
Auto_Id INT IDENTITY (1,1) NOT NULL,
Auto_Patente VARCHAR(10) NOT NULL UNIQUE,
Auto_Detalle VARCHAR(26),
Auto_Marca_Modelo INT REFERENCES [DESCONOCIDOS4].MARCA_MODELO,
Auto_Licencia VARCHAR(26),
Auto_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Auto_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].UNIDAD_DISPONIBLE(
Uni_Dis_Auto INT REFERENCES [DESCONOCIDOS4].AUTO NOT NULL,
Uni_Dis_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Uni_Dis_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
PRIMARY KEY(Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno)
);
GO

CREATE TABLE [DESCONOCIDOS4].VIAJE(
Viaje_Nro INT NOT NULL IDENTITY(1,1),
Viaje_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Viaje_Cliente INT REFERENCES [DESCONOCIDOS4].CLIENTE NOT NULL,
Viaje_Automovil INT REFERENCES [DESCONOCIDOS4].AUTO NOT NULL,
Viaje_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
Viaje_Precio_Base NUMERIC(18,2) NOT NULL,
Viaje_Valor_km NUMERIC(18,2) NOT NULL,
Viaje_Importe NUMERIC(18,2) NOT NULL,
Viaje_Cantidad_Km NUMERIC(18,0),
Viaje_Fecha_Hora_Inicio DATETIME,
Viaje_Fecha_Hora_Fin DATETIME,
PRIMARY KEY (Viaje_Nro)
);
GO
CREATE TABLE [DESCONOCIDOS4].VIAJE_REP(
VREP_Nro INT NOT NULL IDENTITY(1,1),
VREP_Chofer INT  NOT NULL,
VREP_Cliente INT NOT NULL,
VREP_Automovil VARCHAR(10) NOT NULL,
VREP_Turno INT  NOT NULL,
VREP_Precio_Base NUMERIC(18,2) NOT NULL,
VREP_Valor_km NUMERIC(18,2) NOT NULL,
VREP_Importe NUMERIC(18,2) NOT NULL,
VREP_Cantidad_Km NUMERIC(18,0),
VREP_Fecha_Hora_Inicio DATETIME,
VREP_Fecha_Hora_Fin DATETIME,
PRIMARY KEY (VREP_Nro)
);
GO
CREATE TABLE [DESCONOCIDOS4].CABECERO_FACTURA(
Cab_Fac_Nro NUMERIC(18,0) NOT NULL,
Cab_Fac_Fecha DATETIME NOT NULL,
Cab_Fac_Cliente INT  NOT NULL,
Cab_Fac_Fecha_Inicio DATETIME,
Cab_Fac_Fecha_Fin DATETIME,
Cab_Fac_Total_Fac NUMERIC(18,2),
PRIMARY KEY (Cab_Fac_Nro,Cab_Fac_Fecha,Cab_Fac_Cliente),
FOREIGN KEY (Cab_Fac_Cliente) REFERENCES [DESCONOCIDOS4].CLIENTE,
);
GO
CREATE TABLE [DESCONOCIDOS4].ITEM_FACTURA(
Item_Fac_Nro_Fac NUMERIC(18,0)  NOT NULL,
Item_Fac_Item INT NOT NULL,
Item_Fac_Id_Viaje int  REFERENCES [DESCONOCIDOS4].VIAJE NOT NULL,
PRIMARY KEY (Item_Fac_Nro_Fac,Item_Fac_Item) 
);
GO
CREATE TABLE [DESCONOCIDOS4].CABECERO_RENDICION(
Cab_Rend_Nro NUMERIC(18,0) NOT NULL,
Cab_Rend_Turno INT REFERENCES [DESCONOCIDOS4].TURNO NOT NULL,
Cab_Rend_Chofer INT REFERENCES [DESCONOCIDOS4].CHOFER NOT NULL,
Cab_Rend_Fecha DATETIME NOT NULL,
Cab_Rend_Importe NUMERIC(18,2),
PRIMARY KEY (Cab_Rend_Nro,Cab_Rend_Turno,Cab_Rend_Chofer)
);
GO
CREATE TABLE [DESCONOCIDOS4].ITEM_RENDICION(
Item_Rend_NroRend NUMERIC(18,0)  NOT NULL,
Item_Rend_Pos SMALLINT NOT NULL,
Item_Rend_Viaje INT REFERENCES [DESCONOCIDOS4].VIAJE NOT NULL
PRIMARY KEY (Item_Rend_NroRend,Item_Rend_Pos),
);
GO
CREATE TABLE [DESCONOCIDOS4].ROL(
Rol_Id SMALLINT NOT NULL IDENTITY(1,1), 
Rol_Nombre VARCHAR(255) NOT NULL,
Rol_Habilitado BIT DEFAULT 1,
PRIMARY KEY(Rol_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].USUARIO_ROL(
UsuRol_Usu_Id NVARCHAR(255),
UsuRol_Rol_Id SMALLINT,
);
GO
CREATE TABLE [DESCONOCIDOS4].FUNCIONALIDAD(
Func_Id INT IDENTITY(1,1),
Func_Nombre VARCHAR(255),
Func_Descripcion VARCHAR(255),
PRIMARY KEY(Func_Id)
);
GO
CREATE TABLE [DESCONOCIDOS4].FUNCIONALIDADXROL(
FuncRol_Rol_Id SMALLINT REFERENCES  [DESCONOCIDOS4].ROL(Rol_Id) NOT NULL,
FunRol_Func_Id INT REFERENCES [DESCONOCIDOS4].FUNCIONALIDAD(Func_Id )
NOT NULL,
);
GO
/*-------------------PROGRAMACION DE LA MIGRACION--------------------*/
-- FUNCIONES 
IF OBJECT_ID('[DESCONOCIDOS4].DAME_DNI_CLIENTE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].DAME_DNI_CLIENTE;
GO

CREATE FUNCTION [DESCONOCIDOS4].DAME_DNI_CLIENTE(@CLIENTE INT)
RETURNS NUMERIC(18,0)
AS
BEGIN
	DECLARE @DNI NUMERIC(18,0)
	SET @DNI = (SELECT PER.Persona_Dni  FROM DESCONOCIDOS4.CLIENTE CLI LEFT JOIN DESCONOCIDOS4.PERSONA PER ON PER.Persona_Id = CLI.Cliente_Per_ID WHERE CLI.Cliente_Id = @CLIENTE)
	 
RETURN @DNI
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].DAME_DNI_CHOFER','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].DAME_DNI_CHOFER;
GO

CREATE FUNCTION [DESCONOCIDOS4].DAME_DNI_CHOFER(@CHOFER INT)
RETURNS NUMERIC(18,0)
AS
BEGIN
	DECLARE @DNI NUMERIC (18,0)
	SET @DNI = (SELECT PER.Persona_Dni FROM DESCONOCIDOS4.CHOFER CH LEFT JOIN DESCONOCIDOS4.PERSONA PER ON PER.Persona_Id = CH.Chofer_Per_Id WHERE CH.Chofer_Id = @CHOFER)

RETURN @DNI
END
GO
IF OBJECT_ID('[DESCONOCIDOS4].FN_USU_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_USU_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_USU_X_DNI(@DNI INT)
RETURNS  INT
AS
BEGIN
	DECLARE @USU_ID INT
	SET @USU_ID = (SELECT Usu_Id  FROM DESCONOCIDOS4.USUARIO  LEFT JOIN DESCONOCIDOS4.PERSONA  ON Persona_Id = Usu_Per_Id WHERE Persona_Dni = @DNI)
	 
RETURN @USU_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE(@MARCA VARCHAR(255), @MODELO VARCHAR(255))
RETURNS  INT
AS
BEGIN
	DECLARE @MARCAMOD_ID INT
	SET @MARCAMOD_ID = (SELECT TMarca_Modelo_id  FROM DESCONOCIDOS4.MARCA_MODELO  
	LEFT JOIN DESCONOCIDOS4.MARCA ON Marca_Id=TAuto_Marca 
	LEFT JOIN DESCONOCIDOS4.MODELO ON Modelo_Id=TAuto_Modelo 
	WHERE Marca_Nombre=@MARCA AND Modelo_Nombre=@MODELO)
	 
RETURN @MARCAMOD_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(@PATENTE VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @AUTO_ID INT
	SET @AUTO_ID = (SELECT Auto_Id  FROM DESCONOCIDOS4.AUTO   WHERE Auto_Patente = @PATENTE)	 
RETURN @AUTO_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_CHOFER_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI(@DNI VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @CHOFER_ID INT
	SET @CHOFER_ID = (SELECT Chofer_Id  FROM DESCONOCIDOS4.CHOFER LEFT JOIN DESCONOCIDOS4.PERSONA  ON Chofer_Per_Id = Persona_Id WHERE Persona_Dni = @DNI)	 
RETURN @CHOFER_ID
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI(@DNI VARCHAR(10))
RETURNS  INT
AS
BEGIN
	DECLARE @CLIENTE_ID INT
	SET @CLIENTE_ID = (SELECT Cliente_Id  FROM DESCONOCIDOS4.CLIENTE LEFT JOIN DESCONOCIDOS4.PERSONA  ON Cliente_Per_ID = Persona_Id WHERE Persona_Dni = @DNI)	 
RETURN @CLIENTE_ID
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES;
GO
CREATE FUNCTION [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES(@DESC VARCHAR(255))
RETURNS  INT
AS
BEGIN
	DECLARE @TURNO_ID INT
	SET @TURNO_ID = (SELECT DISTINCT Turno_Id  FROM DESCONOCIDOS4.TURNO T LEFT JOIN gd_esquema.Maestra M ON M.Turno_Descripcion = T.Turno_Descripcion WHERE T.Turno_Descripcion = @DESC)	 
RETURN @TURNO_ID
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_EXISTE_TEL','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_EXISTE_TEL;
GO
--BUSCA SI YA EXISTE EL TELEFONO, DEVUELVE 1 SI LO ENCUENTRA
CREATE FUNCTION [DESCONOCIDOS4].FN_EXISTE_TEL(@TEL NUMERIC(18,0))
RETURNS  SMALLINT 
AS
 BEGIN
 DECLARE @RESUL INT
  IF (SELECT COUNT(* )FROM [DESCONOCIDOS4].PERSONA WHERE Persona_Telefono=@TEL)>1
	 SET @RESUL=1
  ELSE 
	SET @RESUL=0
 RETURN @RESUL
END
GO

IF OBJECT_ID('[DESCONOCIDOS4].FN_TOTAL_FACT','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TOTAL_FACT;
GO
--CALCULA DEL TOTAL DE LA FACTURA SUMANDO EL MONTO DE LOS VIAJES DE LOS  ITEMS FACTURADOS
CREATE FUNCTION [DESCONOCIDOS4].FN_TOTAL_FACT(@NRO_FAC  NUMERIC(18,0))
RETURNS  NUMERIC(18,2) 
AS
 BEGIN
 DECLARE @RESUL NUMERIC(18,2)
 SET @RESUL =(SELECT SUM(V.Viaje_Importe) FROM [DESCONOCIDOS4].ITEM_FACTURA F INNER JOIN [DESCONOCIDOS4].VIAJE V ON F.Item_Fac_Id_Viaje=V.Viaje_Nro WHERE F.Item_Fac_Nro_Fac=@NRO_FAC)
 RETURN @RESUL
END
GO


IF OBJECT_ID('[DESCONOCIDOS4].FN_TOTAL_REND','FN') IS NOT NULL
	DROP FUNCTION [DESCONOCIDOS4].FN_TOTAL_REND;
GO
--CALCULA DEL TOTAL DE LA FACTURA SUMANDO EL MONTO DE LOS VIAJES DE LOS  ITEMS FACTURADOS
CREATE FUNCTION [DESCONOCIDOS4].FN_TOTAL_REND(@NRO_REND  NUMERIC(18,0))
RETURNS  NUMERIC(18,2) 
AS
 BEGIN
 DECLARE @RESUL NUMERIC(18,2)
 SET @RESUL =(SELECT SUM(V.Viaje_Importe*0.3) FROM [DESCONOCIDOS4].ITEM_RENDICION F INNER JOIN [DESCONOCIDOS4].VIAJE V ON F.Item_Rend_Viaje=V.Viaje_Nro WHERE F.Item_Rend_NroRend=@NRO_REND)
 RETURN @RESUL
END
GO


-- PROCEDIMIENTOS DE MIGRACION Y CARGA DE TABLAS --

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE;
GO
-- Se puebla la tabla PERSONA Y CLIENTE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE
AS
BEGIN TRANSACTION

INSERT INTO [DESCONOCIDOS4].PERSONA (Persona_Dni,Persona_Nombre
      ,Persona_Apellido,Persona_Direccion
      ,Persona_Piso,Persona_Dartamento,Persona_Localidad
      ,Persona_Telefono,Persona_Mail,Persona_Cod_Postal
      ,Persona_Fecha_Nac) 
	  SELECT DISTINCT Cliente_Dni,Cliente_Nombre,Cliente_Apellido,Cliente_Direccion,'0','-','-',Cliente_Telefono,Cliente_Mail,'-',Cliente_Fecha_Nac FROM gd_esquema.Maestra
	  INSERT INTO  [DESCONOCIDOS4].CLIENTE (Cliente_Per_ID)
	  SELECT Persona_Id FROM [DESCONOCIDOS4].PERSONA
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER;
GO
-- Se puebla la tabla PERSONA Y CHOFER
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER
AS
BEGIN TRANSACTION

INSERT INTO [DESCONOCIDOS4].PERSONA (Persona_Dni,Persona_Nombre
      ,Persona_Apellido,Persona_Direccion
      ,Persona_Piso,Persona_Dartamento,Persona_Localidad
      ,Persona_Telefono,Persona_Mail,Persona_Cod_Postal
      ,Persona_Fecha_Nac) 
	  SELECT DISTINCT Chofer_Dni,Chofer_Nombre,Chofer_Apellido,Chofer_Direccion,'0','-','-',Chofer_Telefono,Chofer_Mail,'-',Chofer_Fecha_Nac FROM gd_esquema.Maestra
	  INSERT INTO  [DESCONOCIDOS4].CHOFER (Chofer_Per_Id)
	  SELECT Persona_Id FROM [DESCONOCIDOS4].PERSONA WHERE PERSONA.Persona_Id NOT IN (SELECT Cliente_Per_ID FROM [DESCONOCIDOS4].CLIENTE )
COMMIT
GO
--USUARIO AUTOMATICO AL INSERTAR UN REGISTRO EN PERSONA
IF OBJECT_ID (N'[DESCONOCIDOS4].TR_USUARIO_AUTOMATICO', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_USUARIO_AUTOMATICO;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_USUARIO_AUTOMATICO ON [DESCONOCIDOS4].PERSONA
FOR INSERT
AS
BEGIN TRANSACTION	
	INSERT INTO [DESCONOCIDOS4].USUARIO (Usu_Per_Id,Usu_Nombre_Usuario,Usu_Password)
	SELECT I.Persona_Id,
	CONCAT(LEFT(I.Persona_Apellido,4),LEFT(I.Persona_Nombre,3)),
	HashBytes('SHA2_256',convert(varchar(255), 'Inicio2017')) 
	FROM INSERTED I 

COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN;
GO
-- Se inserta usuario admin
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].USUARIO(Usu_Nombre_Usuario,Usu_Password) 
	  VALUES ('admin',HashBytes('SHA2_256',convert(varchar(255), 'w23e')))
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MARCA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MARCA;
GO
-- Se puebla la tabla MARCA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MARCA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MARCA (Marca_Nombre) 
	  SELECT DISTINCT Auto_Marca FROM gd_esquema.Maestra
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MODELO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MODELO;
GO
-- Se puebla la tabla MODELO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MODELO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MODELO (Modelo_Nombre,Modelo_Rodado) 
	  SELECT DISTINCT Auto_Modelo,Auto_Rodado FROM gd_esquema.Maestra
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO;
GO
-- Se puebla la tabla MARCA_MODELO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].MARCA_MODELO (TAuto_Marca,TAuto_Modelo) 
	  SELECT DISTINCT Marca_Id,Modelo_Id FROM gd_esquema.Maestra 
	  LEFT JOIN [DESCONOCIDOS4].MARCA ON Marca_Nombre=Auto_Marca 
	  LEFT JOIN [DESCONOCIDOS4].MODELO ON Modelo_Nombre=Auto_Modelo
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_AUTO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_AUTO;
GO
-- Se puebla la tabla AUTO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_AUTO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].AUTO (Auto_Patente,Auto_Detalle,Auto_Marca_Modelo,Auto_Licencia) 
	  SELECT DISTINCT Auto_Patente,Auto_Marca+' '+Auto_Modelo,[DESCONOCIDOS4].FN_MARMOD_ID_X_NOMBRE(Auto_Marca,Auto_Modelo),Auto_Licencia FROM gd_esquema.Maestra 
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_TURNO', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_TURNO;
GO
-- Se puebla la tabla TURNO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_TURNO
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].TURNO (Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base) 
	  SELECT DISTINCT Turno_Hora_Inicio,Turno_Hora_Fin,Turno_Descripcion,Turno_Valor_Kilometro,Turno_Precio_Base FROM gd_esquema.Maestra
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE;
GO
-- Se puebla la tabla UNIDAD_DISPONIBLE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].UNIDAD_DISPONIBLE(Uni_Dis_Auto,Uni_Dis_Chofer,Uni_Dis_Turno) 
	  SELECT DISTINCT 
	  [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(Auto_Patente),
	  [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI(Chofer_Dni),
	  [DESCONOCIDOS4].FN_ID_TURNO_X_DESC_MAES(Turno_Descripcion) FROM gd_esquema.Maestra
COMMIT
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA;
GO
-- Se puebla la tabla CABECERO_FACTURA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_FACTURA (Cab_Fac_Nro,Cab_Fac_Fecha,Cab_Fac_Cliente,Cab_Fac_Fecha_Inicio,Cab_Fac_Fecha_Fin) 
	  SELECT 
		  DISTINCT
		  Factura_Nro,
		  Factura_Fecha,
		  (SELECT Cliente_Id FROM [DESCONOCIDOS4].CLIENTE LEFT JOIN  [DESCONOCIDOS4].PERSONA ON  Cliente_Per_ID=Persona_Id WHERE Persona_Dni= M.Cliente_Dni),
		  Factura_Fecha_Inicio,
		  Factura_Fecha_Fin 
	  FROM gd_esquema.Maestra M WHERE Factura_Nro>0
COMMIT
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_VIAJE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_VIAJE;
GO
-- Se puebla la tabla VIAJE
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_VIAJE
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].VIAJE (Viaje_Chofer,Viaje_Cliente,Viaje_Automovil,Viaje_Turno,Viaje_Precio_Base,Viaje_Valor_km,Viaje_Importe,Viaje_Cantidad_Km,Viaje_Fecha_Hora_Inicio,Viaje_Fecha_Hora_Fin) 
	  SELECT 
		  
		  (SELECT Chofer_Id FROM CHOFER LEFT JOIN PERSONA ON Persona_Id=Chofer_Per_Id WHERE M.Chofer_Dni=Persona_Dni),	
		  (SELECT Cliente_Id FROM CLIENTE LEFT JOIN PERSONA ON Persona_Id=Cliente_Per_ID WHERE M.Cliente_Dni=Persona_Dni),	  
		  [DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(Auto_Patente),
		  (SELECT Turno_Id FROM TURNO T 
			WHERE CONCAT(M.Turno_Descripcion,M.Turno_Hora_Inicio,M.Turno_Hora_Fin,M.Turno_Precio_Base,M.Turno_Valor_Kilometro)=CONCAT(T.Turno_Descripcion,T.Turno_Hora_Inicio,T.Turno_Hora_Fin,T.Turno_Precio_Base,T.Turno_Valor_Kilometro) ),
		  M.Turno_Precio_Base,
		  M.Turno_Valor_Kilometro,
		  M.Turno_Precio_Base+(M.Turno_Valor_Kilometro*M.Viaje_Cant_Kilometros),
		  M.Viaje_Cant_Kilometros,
		  M.Viaje_Fecha,
		  DATEADD(SECOND,1,M.Viaje_Fecha)
	  FROM gd_esquema.Maestra M WHERE M.Factura_Nro IS NULL AND M.Rendicion_Nro IS NULL ORDER BY M.Viaje_Fecha ASC
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].TR_VIAJE_REP', N'TR') IS NOT NULL
		DROP TRIGGER  [DESCONOCIDOS4].TR_VIAJE_REP;
GO

CREATE TRIGGER  [DESCONOCIDOS4].TR_VIAJE_REP ON [DESCONOCIDOS4].VIAJE
INSTEAD OF  INSERT
AS
BEGIN TRANSACTION	
	INSERT INTO [DESCONOCIDOS4].VIAJE_REP(VREP_Chofer,VREP_Cliente,VREP_Automovil,VREP_Turno,VREP_Precio_Base,VREP_Valor_km,VREP_Importe,VREP_Cantidad_Km,VREP_Fecha_Hora_Inicio,VREP_Fecha_Hora_Fin)
	SELECT I.Viaje_Chofer,I.Viaje_Cliente,I.Viaje_Automovil,I.Viaje_Turno,I.Viaje_Precio_Base,I.Viaje_Valor_km,I.Viaje_Importe,I.Viaje_Cantidad_Km,I.Viaje_Fecha_Hora_Inicio,I.Viaje_Fecha_Hora_Fin
	FROM INSERTED I GROUP BY I.Viaje_Chofer,I.Viaje_Cliente,I.Viaje_Automovil,I.Viaje_Turno,I.Viaje_Precio_Base,I.Viaje_Valor_km,I.Viaje_Importe,I.Viaje_Cantidad_Km,I.Viaje_Fecha_Hora_Inicio,I.Viaje_Fecha_Hora_Fin
	HAVING count(*) > 1
	INSERT INTO [DESCONOCIDOS4].VIAJE
	SELECT DISTINCT I.Viaje_Chofer,I.Viaje_Cliente,I.Viaje_Automovil,I.Viaje_Turno,I.Viaje_Precio_Base,I.Viaje_Valor_km,I.Viaje_Importe,I.Viaje_Cantidad_Km,I.Viaje_Fecha_Hora_Inicio,I.Viaje_Fecha_Hora_Fin
	FROM INSERTED I


COMMIT;


GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA;
GO
-- Se puebla la tabla PRC_MIGRA_ITEM_FACTURA
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].ITEM_FACTURA(Item_Fac_Nro_Fac,Item_Fac_Item,Item_Fac_Id_Viaje) 
	  SELECT 
	  DISTINCT 
		  M2.Factura_Nro, 
		  ROW_NUMBER() OVER (PARTITION BY M2.Factura_Nro ORDER BY M2.Factura_Nro),
		  Viaje_Nro 
	  FROM [DESCONOCIDOS4].VIAJE LEFT JOIN  [DESCONOCIDOS4].CLIENTE ON Viaje_Cliente= Cliente_Id LEFT JOIN [DESCONOCIDOS4].CHOFER ON Viaje_Chofer=Chofer_Id
	LEFT JOIN  [DESCONOCIDOS4].PERSONA P1 ON P1.Persona_Id= Cliente_Per_ID LEFT JOIN [DESCONOCIDOS4].PERSONA P2 ON P2.Persona_Id= Chofer_Per_Id
	LEFT JOIN gd_esquema.Maestra M2
	 ON  CONCAT(M2.Viaje_Fecha,M2.Viaje_Cant_Kilometros,M2.Cliente_Dni,M2.Chofer_Dni,[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(M2.Auto_Patente))=CONCAT(Viaje_Fecha_Hora_Inicio,Viaje_Cantidad_Km,P1.Persona_Dni,P2.Persona_Dni,Viaje_Automovil) 
	 WHERE M2.Factura_Nro>0 AND M2.Rendicion_Nro IS NULL  GROUP BY M2.Factura_Nro,Viaje_Nro ORDER BY M2.Factura_Nro,Viaje_Nro
COMMIT

GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION;
GO
-- Se puebla la tabla CABECERO_RENDICION
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].CABECERO_RENDICION(Cab_Rend_Nro,Cab_Rend_Turno,Cab_Rend_Chofer,Cab_Rend_Fecha,Cab_Rend_Importe) 
	  SELECT 
		  DISTINCT
		  M.Rendicion_Nro,
		  (SELECT DISTINCT Turno_Id FROM [DESCONOCIDOS4].TURNO T LEFT JOIN  gd_esquema.Maestra M2 
			ON CONCAT(M2.Turno_Hora_Inicio,M2.Turno_Hora_Fin,M2.Turno_Descripcion,M2.Turno_Valor_Kilometro,M2.Turno_Precio_Base) =
				CONCAT(T.Turno_Hora_Inicio,T.Turno_Hora_Fin,T.Turno_Descripcion,T.Turno_Valor_Kilometro,T.Turno_Precio_Base) WHERE M2.Rendicion_Nro=M.Rendicion_Nro ),
		  (SELECT Chofer_Id FROM [DESCONOCIDOS4].CHOFER LEFT JOIN  [DESCONOCIDOS4].PERSONA ON  Chofer_Per_Id=Persona_Id WHERE Persona_Dni= M.Chofer_Dni),
		  M.Rendicion_Fecha,
		  sum(M.Rendicion_Importe)
	  FROM gd_esquema.Maestra M WHERE M.Rendicion_Nro>0 GROUP BY  M.Rendicion_Nro,M.Chofer_Dni,M.Rendicion_Fecha
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION;
GO
-- Se puebla la tabla ITEM_RENDICION
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION
AS
BEGIN TRANSACTION
	  INSERT INTO [DESCONOCIDOS4].ITEM_RENDICION(Item_Rend_NroRend,Item_Rend_Pos,Item_Rend_Viaje) 
	  SELECT 
	  DISTINCT 
		  M2.Rendicion_Nro, 
		  ROW_NUMBER() OVER (PARTITION BY M2.Rendicion_Nro ORDER BY M2.Rendicion_Nro),
		  Viaje_Nro 
	  FROM [DESCONOCIDOS4].VIAJE LEFT JOIN  [DESCONOCIDOS4].CLIENTE ON Viaje_Cliente= Cliente_Id LEFT JOIN [DESCONOCIDOS4].CHOFER ON Viaje_Chofer=Chofer_Id
	LEFT JOIN  [DESCONOCIDOS4].PERSONA P1 ON P1.Persona_Id= Cliente_Per_ID LEFT JOIN [DESCONOCIDOS4].PERSONA P2 ON P2.Persona_Id= Chofer_Per_Id
	LEFT JOIN gd_esquema.Maestra M2
	 ON  CONCAT(M2.Viaje_Fecha,M2.Viaje_Cant_Kilometros,M2.Cliente_Dni,M2.Chofer_Dni,[DESCONOCIDOS4].FN_ID_AUTO_X_PATENTE(M2.Auto_Patente))=CONCAT(Viaje_Fecha_Hora_Inicio,Viaje_Cantidad_Km,P1.Persona_Dni,P2.Persona_Dni,Viaje_Automovil) 
	 WHERE M2.Rendicion_Nro>0 AND M2.Factura_Nro IS NULL  GROUP BY M2.Rendicion_Nro,Viaje_Nro ORDER BY M2.Rendicion_Nro,Viaje_Nro
COMMIT
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_ROLES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_ROLES;
GO
--Se pueba la tabla  ROLES
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_ROLES 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('ADMINISTRATIVO')
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('CHOFER')
	INSERT INTO [DESCONOCIDOS4].ROL (Rol_Nombre) VALUES ('CLIENTE')
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES;
GO
--Se pueba la tabla  FUNCIONALIDAD
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('ABM_ROL', 'Dar de alta, dar de baja o modificar un rol')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('ABM_CLIENTE','Dar de alta, dar de baja o modificar un cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('ABM_CHOFER','Dar de alta, dar de baja o modificar un chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('ABM_AUTOMOVIL','Dar de alta, dar de baja o modificar un automovil')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('ABM_TURNO','Dar de alta, dar de baja o modificar un  turno')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('REGISTRO_VIAJE','Registrar un viaje')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('RENDICION_CHOFER','Rendición de cuenta de un chofer')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('FACTURAR_CLIENTE','Facturar los viajes de un cliente')
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDAD (Func_Nombre,Func_Descripcion) VALUES ('LISTADO_ESTADISTICO','Listados estadísticos')
	
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL;
GO
-- Se puebla la tabla FUNCIONALIDADXROL
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL 
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='ADMINISTRATIVO'	
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='CHOFER'AND Func_Id= 3
	INSERT INTO [DESCONOCIDOS4].FUNCIONALIDADXROL(FuncRol_Rol_Id,FunRol_Func_Id)
	SELECT Rol_Id,Func_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].FUNCIONALIDAD WHERE Rol_Nombre='CLIENTE'AND Func_Id=2

COMMIT;
GO
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL;
GO
-- Se puebla la tabla USUARIO_ROL
CREATE PROCEDURE [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL
AS
BEGIN TRANSACTION
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT [DESCONOCIDOS4].FN_USU_X_DNI([DESCONOCIDOS4].DAME_DNI_CLIENTE(Cliente_Id)),Rol_Id FROM [DESCONOCIDOS4].ROL, [DESCONOCIDOS4].CLIENTE
	 WHERE Rol_Nombre='CLIENTE'		
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT [DESCONOCIDOS4].FN_USU_X_DNI([DESCONOCIDOS4].DAME_DNI_CLIENTE(Chofer_Id)),Rol_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].CHOFER 
	WHERE Rol_Nombre='CHOFER'
	INSERT INTO [DESCONOCIDOS4].USUARIO_ROL(UsuRol_Usu_Id,UsuRol_Rol_Id)
	SELECT Usu_Id,Rol_Id FROM [DESCONOCIDOS4].ROL,[DESCONOCIDOS4].USUARIO 
	WHERE Rol_Nombre='ADMINISTRATIVO' AND Usu_Nombre_Usuario='admin'
COMMIT;
GO


IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA;
GO
-- Se actualiza el importe total de la factura 
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA
AS
BEGIN TRAN
	UPDATE [DESCONOCIDOS4].CABECERO_FACTURA SET Cab_Fac_Total_Fac= [DESCONOCIDOS4].FN_TOTAL_FACT(Cab_Fac_Nro)
COMMIT;
GO

IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION;
GO
-- Se actualiza el importe total de la rendicion
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_RENDICION
AS
BEGIN TRAN
	UPDATE [DESCONOCIDOS4].CABECERO_RENDICION SET Cab_Rend_Importe= [DESCONOCIDOS4].FN_TOTAL_REND(Cab_Rend_Nro)
COMMIT;
GO


-- EJECUCION DE MIGRACION

EXEC [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CLIENTE
EXEC [DESCONOCIDOS4].PRC_MIGRA_PERSONA_CHOFER
EXEC [DESCONOCIDOS4].PRC_MIGRA_INSERTAR_ADMIN
EXEC [DESCONOCIDOS4].PRC_MIGRA_MARCA
EXEC [DESCONOCIDOS4].PRC_MIGRA_MODELO
EXEC [DESCONOCIDOS4].PRC_MIGRA_MARCA_MODELO
EXEC [DESCONOCIDOS4].PRC_MIGRA_AUTO
EXEC [DESCONOCIDOS4].PRC_MIGRA_TURNO
EXEC [DESCONOCIDOS4].PRC_MIGRA_UNIDAD_DISPONIBLE
EXEC [DESCONOCIDOS4].PRC_MIGRA_CAB_FACTURA
EXEC [DESCONOCIDOS4].PRC_MIGRA_VIAJE
EXEC [DESCONOCIDOS4].PRC_MIGRA_ITEM_FACTURA
EXEC [DESCONOCIDOS4].PRC_MIGRA_CAB_RENDICION
EXEC [DESCONOCIDOS4].PRC_MIGRA_ITEM_RENDICION
EXEC [DESCONOCIDOS4].PRC_CARGAR_ROLES
EXEC [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADES 
EXEC [DESCONOCIDOS4].PRC_CARGAR_FUNCIONALIDADXROL 
EXEC [DESCONOCIDOS4].PRC_CARGAR_USUARIO_ROL
EXEC [DESCONOCIDOS4].PRC_ACTUALIZAR_TOTAL_FACTURA



-- FIN MIGRACION

/*--------------------------------- PROGRAMACION DE LA APP ------------------------------*/
-- ALTA DE CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CLIENTE
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), --  verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME
AS 
BEGIN TRANSACTION 
 INSERT INTO  [DESCONOCIDOS4].PERSONA VALUES (
		@DNI,
		@Nom,
		@Ape,
		@Dir_calle,
		@Dir_nro_piso,
		@Dir_depto,
		@localidad,
		@Cod_Pos,
		@Tel,
		@Mail,
		@Fec_nac)
 INSERT INTO [DESCONOCIDOS4].CLIENTE VALUES(SCOPE_IDENTITY(),1)
 COMMIT;
 GO

 --BAJA CLIENTE  
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_CLIENTE
@DNI_CLI NUMERIC (18,0)
AS
BEGIN TRANSACTION 
	DECLARE @ID_CLI INT
  SET @ID_CLI= [DESCONOCIDOS4].FN_ID_CLIENTE_X_DNI (@DNI_CLI)
  UPDATE [DESCONOCIDOS4].CLIENTE SET Cliente_Habilitado=0 WHERE Cliente_Id=@ID_CLI
COMMIT;
GO

-- MODIFICACION CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_CLIENTE
@PERS_ID INT,-- Debe ser introducido por la app es devuelta por el listado de busqueda
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), -- verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME,
@Habilitar BIT
AS 
BEGIN TRANSACTION 	
	
	UPDATE [DESCONOCIDOS4].PERSONA SET  Persona_Dni = @DNI,Persona_Nombre=@Nom,Persona_Apellido=@Ape,Persona_Direccion=@Dir_calle,Persona_Piso=@Dir_nro_piso,
	Persona_Dartamento=@Dir_depto,Persona_Localidad=@localidad,Persona_Cod_Postal=@Cod_Pos,Persona_Telefono=@Tel,Persona_Mail=@Mail,Persona_Fecha_Nac=@Fec_nac
	WHERE PERSONA.Persona_Id=@PERS_ID
	UPDATE [DESCONOCIDOS4].CLIENTE SET Cliente_Habilitado=@Habilitar
	WHERE Cliente_Per_ID=@PERS_ID
COMMIT;
GO

--BUSCAR CLIENTES EXISTENTES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BUSCAR_CLIENTES', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BUSCAR_CLIENTES;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BUSCAR_CLIENTES
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN 
	 SELECT 
	   Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Dartamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CLIENTE C ON C.Cliente_Per_ID= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%')         
              AND convert(varchar(50),P.Persona_Dni) LIKE convert(varchar(50),@DNI)
              AND C.Cliente_Habilitado = 1;
END
GO

-- DAR DE ALTA CLIENTE SIENDO CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CLI_DESDE_CHOFER
 @Per_id INT -- Se obtiene cuando se busca al cliente chofer para modificar es el campo 1
AS
BEGIN TRANSACTION
            INSERT INTO [DESCONOCIDOS4].CLIENTE (Cliente_Per_ID) VALUES(@Per_id);
 COMMIT;
 GO

-- ALTA DE CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CHOFER
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), --  verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME
AS 
BEGIN TRANSACTION 
 INSERT INTO  [DESCONOCIDOS4].PERSONA VALUES (
		@DNI,
		@Nom,
		@Ape,
		@Dir_calle,
		@Dir_nro_piso,
		@Dir_depto,
		@localidad,
		@Cod_Pos,
		@Tel,
		@Mail,
		@Fec_nac)
 INSERT INTO [DESCONOCIDOS4].CHOFER VALUES(SCOPE_IDENTITY(),1)
 COMMIT;
 GO

 --BAJA CHOFER  
 IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BAJA_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BAJA_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BAJA_CHOFER
@DNI_CHO NUMERIC (18,0)
AS
BEGIN TRANSACTION 
  DECLARE @ID_CHO INT
  SET @ID_CHO= [DESCONOCIDOS4].FN_ID_CHOFER_X_DNI(@DNI_CHO)
  UPDATE [DESCONOCIDOS4].CHOFER  SET Chofer_Habilitado=0 WHERE Chofer_Id=@ID_CHO
COMMIT;
GO

-- MODIFICACION CHOFER
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_MODIFICACION_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_MODIFICACION_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_MODIFICACION_CHOFER
@PERS_ID INT,-- Debe ser introducido por la app , es devuelta por el listado de busqueda
@DNI NUMERIC(18,0),
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@Dir_calle VARCHAR(255),
@Dir_nro_piso SMALLINT,
@Dir_depto VARCHAR(255),
@localidad VARCHAR(255),
@Cod_Pos VARCHAR(255),
@Tel NUMERIC(18,0), -- verifica que no este repetido la restriccion UNIQUE HACER TRY AND CATCH EN LA APP
@Mail VARCHAR(255),
@Fec_nac DATETIME,
@Habilitar BIT
AS 
BEGIN TRANSACTION 	
	
	UPDATE [DESCONOCIDOS4].PERSONA SET  Persona_Dni = @DNI,Persona_Nombre=@Nom,Persona_Apellido=@Ape,Persona_Direccion=@Dir_calle,Persona_Piso=@Dir_nro_piso,
	Persona_Dartamento=@Dir_depto,Persona_Localidad=@localidad,Persona_Cod_Postal=@Cod_Pos,Persona_Telefono=@Tel,Persona_Mail=@Mail,Persona_Fecha_Nac=@Fec_nac
	WHERE PERSONA.Persona_Id=@PERS_ID
	UPDATE [DESCONOCIDOS4].CHOFER SET Chofer_Habilitado=@Habilitar
	WHERE Chofer_Per_Id=@PERS_ID
COMMIT;
GO


--BUSCAR CHOFER EXISTENTES
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_BUSCAR_CHOFER', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_BUSCAR_CHOFER;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_BUSCAR_CHOFER
@Nom VARCHAR(255),
@Ape VARCHAR(255),
@DNI NUMERIC(18,0)
AS
BEGIN 
	 SELECT 
	   Persona_Dni
      ,Persona_Nombre
      ,Persona_Apellido
      ,Persona_Direccion
      ,Persona_Piso
      ,Persona_Dartamento
      ,Persona_Localidad
      ,Persona_Cod_Postal
      ,Persona_Telefono
      ,Persona_Mail
      ,Persona_Fecha_Nac
	  FROM [DESCONOCIDOS4].PERSONA P INNER JOIN [DESCONOCIDOS4].CHOFER C ON C.Chofer_Per_Id= P.Persona_Id
	  WHERE   P.Persona_Nombre LIKE ISNULL('%' + @Nom + '%', '%')
              AND P.Persona_Apellido LIKE ISNULL('%' + @Ape + '%', '%')         
              AND convert(varchar(50),P.Persona_Dni) LIKE convert(varchar(50),@DNI)
              AND C.Chofer_Habilitado = 1;
END
GO
-- DAR DE ALTA CHOFER SIENDO CLIENTE
IF OBJECT_ID (N'[DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI', N'P') IS NOT NULL
		DROP PROCEDURE  [DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI;
GO
CREATE PROCEDURE [DESCONOCIDOS4].PRC_ALTA_CHOFER_DESDE_CLI
 @Per_id INT -- Se obtiene cuando se busca al cliente chofer para modificar es el campo 1
AS
BEGIN TRANSACTION
            INSERT INTO [DESCONOCIDOS4].CHOFER (Chofer_Per_Id) VALUES(@Per_id);
 COMMIT;
 GO

 -- LISTADOS ESTADISTICOS

 /*TOP 5 CHOFERES CON MAYOR RECAUDACION*/
IF OBJECT_ID(N'[DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION','P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CHOFERES_MAYOR_RECAUDACION(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT 
	TOP 5
		DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Chofer		AS CHOFER,
		SUM(DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Importe)  AS IMPORTE
	FROM DESCONOCIDOS4.CABECERO_RENDICION
	WHERE DATEPART(QUARTER,DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Fecha) = @QUARTER AND YEAR(DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Fecha) = @AÑO
	GROUP BY DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Chofer
	ORDER BY SUM(DESCONOCIDOS4.CABECERO_RENDICION.Cab_Rend_Importe) DESC
END
GO
/* FIN TOP 5 CHOFERES CON MAYOR RECAUDACION*/

/* TOP 5 Choferes con el viaje más largo realizado*/
IF OBJECT_ID(N'[DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO','P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CHOFERES_VIAJE_MAS_LARGO
@QUARTER INT,
@AÑO INT
AS
	BEGIN
		SELECT
		TOP 5
			DESCONOCIDOS4.VIAJE.Viaje_Chofer			AS CHOFER,
			DESCONOCIDOS4.VIAJE.Viaje_Nro				AS NUM_VIAJE,
			DESCONOCIDOS4.VIAJE.Viaje_Cantidad_Km		AS KM_RECORRIDOS
		FROM DESCONOCIDOS4.VIAJE
		WHERE DATEPART(QUARTER,DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @QUARTER AND YEAR(DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @AÑO
		ORDER BY DESCONOCIDOS4.VIAJE.Viaje_Cantidad_Km DESC
	END
GO
/* FIN TOP 5 Choferes con el viaje más largo realizado*/


/*TOP 5 CLIENTES CON MAYOR CONSUMO*/

IF OBJECT_ID (N'[DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO','P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CLIENTES_MAYOR_CONSUMO(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT
	TOP 5
		DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Cliente			AS CLIENTE,
		SUM(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Total_Fac)	AS TOTAL_FACTURADO
	FROM DESCONOCIDOS4.CABECERO_FACTURA
	WHERE DATEPART(QUARTER,DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Fecha) = @QUARTER AND YEAR(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Fecha) = @AÑO
	GROUP BY DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Cliente
	ORDER BY SUM(DESCONOCIDOS4.CABECERO_FACTURA.Cab_Fac_Total_Fac) DESC
END
GO
/*FIN TOP 5 CLIENTES CON MAYOR CONSUMO*/


/*TOP 5 Cliente que utilizo más veces el mismo automóvil en los viajes que ha realizado*/
--CADA REGISTRO ES UN VIAJE DISTINTO
IF OBJECT_ID(N'[DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO','P') IS NOT NULL
	DROP PROCEDURE [DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO;
GO
CREATE PROCEDURE [DESCONOCIDOS4].CLIENTES_MAS_VECES_MISMO_AUTO(@QUARTER INT,@AÑO INT)
AS
BEGIN
	SELECT 
	TOP 5
		DESCONOCIDOS4.VIAJE.Viaje_Cliente		AS CLIENTE,
		DESCONOCIDOS4.VIAJE.Viaje_Automovil		AS AUTOMOVIL,
		COUNT(*)								AS CANT_VIAJES
	FROM DESCONOCIDOS4.VIAJE
	WHERE DATEPART(QUARTER,DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @QUARTER AND YEAR(DESCONOCIDOS4.VIAJE.Viaje_Fecha_Hora_Inicio) = @AÑO
	GROUP BY DESCONOCIDOS4.VIAJE.Viaje_Cliente,DESCONOCIDOS4.VIAJE.Viaje_Automovil
	ORDER BY  CANT_VIAJES DESC
END
GO

-- TIEMPO 00:01:19
